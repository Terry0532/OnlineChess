{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/terry/UUBC/React/Chess/src/components/game.js\";\n\n/* eslint-disable no-unused-expressions */\nimport React from 'react';\nimport '../index.css';\nimport Board from './board.js';\nimport FallenSoldierBlock from './fallensoldiers';\nimport initialiseChessBoard from '../helpers/initialiseChessBoard';\nimport Queen from '../pieces/queen';\nimport Knight from '../pieces/knight';\nimport Bishop from '../pieces/bishop';\nimport Rook from '../pieces/rook';\nexport default class Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      squares: initialiseChessBoard(),\n      whiteFallenSoldiers: [],\n      blackFallenSoldiers: [],\n      player: 1,\n      sourceSelection: -1,\n      status: '',\n      turn: 'white',\n      lastTurnPawnPosition: undefined,\n      //true === last turn enemy's pawn moved for the first time and it moved 2 squares forward. for en pasaant\n      firstMove: undefined,\n      highLightMoves: [],\n      //for castle\n      allPossibleMovesWhite: [],\n      allPossibleMovesBlack: [],\n      whiteKingFirstMove: true,\n      blackKingFirstMove: true,\n      whiteRookFirstMoveLeft: true,\n      whiteRookFirstMoveRight: true,\n      blackRookFirstMoveLeft: true,\n      blackRookFirstMoveRight: true,\n      whiteKingPosition: 60,\n      blackKingPosition: 4,\n      tempSquares: [],\n      convertPawnPosition: undefined\n    };\n  }\n\n  handleClick(i) {\n    let squares = this.state.squares;\n\n    if (this.state.sourceSelection === -1) {\n      let highLightMoves = [];\n\n      if (!squares[i] || squares[i].player !== this.state.player) {\n        this.setState({\n          status: \"Wrong selection. Choose player \" + this.state.player + \" pieces.\"\n        });\n        squares[i] ? squares[i].style = { ...squares[i].style,\n          backgroundColor: \"\"\n        } : null;\n      } else {\n        //highlight selected piece\n        squares[i].style = { ...squares[i].style,\n          backgroundColor: \"RGB(111,143,114)\"\n        }; // Emerald from http://omgchess.blogspot.com/2015/09/chess-board-color-schemes.html\n        //check if castle is possible and add possible moves to highLightMoves array\n\n        if (i === 4 || i === 60) {\n          if (this.state.turn === \"white\" && this.state.whiteKingFirstMove) {\n            if (this.state.whiteRookFirstMoveLeft && squares[57] === null && squares[58] === null && squares[59] === null && !this.state.allPossibleMovesBlack.some(element => [57, 58, 59].includes(element))) {\n              highLightMoves.push(58);\n            }\n\n            if (this.state.whiteRookFirstMoveRight && squares[61] === null && squares[62] === null && !this.state.allPossibleMovesBlack.some(element => [61, 62].includes(element))) {\n              highLightMoves.push(62);\n            }\n          } else if (this.state.turn === \"black\" && this.state.blackKingFirstMove) {\n            if (this.state.blackRookFirstMoveLeft && squares[1] === null && squares[2] === null && squares[3] === null && !this.state.allPossibleMovesWhite.some(element => [1, 2, 3].includes(element))) {\n              highLightMoves.push(2);\n            }\n\n            if (this.state.blackRookFirstMoveRight && squares[5] === null && squares[6] === null && !this.state.allPossibleMovesWhite.some(element => [5, 6].includes(element))) {\n              highLightMoves.push(6);\n            }\n          }\n        } //highlight possible moves\n\n\n        if (squares[i].name === \"Pawn\") {\n          const enpassant = this.enpassant(i);\n          highLightMoves = this.checkMovesVer2(squares, squares[i].possibleMoves(i, squares, enpassant, this.state.lastTurnPawnPosition), i);\n        } else if (squares[i].name === \"King\") {\n          highLightMoves = highLightMoves.concat(squares[i].possibleMoves(i, squares));\n          highLightMoves = this.checkMovesVer2(squares, highLightMoves, i);\n        } else {\n          highLightMoves = this.checkMovesVer2(squares, squares[i].possibleMoves(i, squares), i);\n        }\n\n        for (let index = 0; index < highLightMoves.length; index++) {\n          const element = highLightMoves[index];\n\n          if (squares[element] !== null) {\n            squares[element].style = { ...squares[element].style,\n              backgroundColor: \"RGB(111,143,114)\"\n            };\n          } else {\n            squares.splice(element, 1, {\n              style: {\n                backgroundColor: \"RGB(111,143,114)\"\n              }\n            });\n          }\n        }\n\n        this.setState({\n          squares: squares,\n          status: \"Choose destination for the selected piece\",\n          sourceSelection: i,\n          highLightMoves: highLightMoves\n        });\n      }\n    } else if (this.state.sourceSelection === -2) {\n      //to convert pawn that reach other side of the chess board\n      if ([10, 11, 12, 13, 50, 51, 52, 53].includes(i)) {\n        //dehighlight\n        if (this.state.turn === \"black\") {\n          squares[10].style = { ...squares[10].style,\n            backgroundColor: \"\"\n          };\n          squares[11].style = { ...squares[11].style,\n            backgroundColor: \"\"\n          };\n          squares[12].style = { ...squares[12].style,\n            backgroundColor: \"\"\n          };\n          squares[13].style = { ...squares[13].style,\n            backgroundColor: \"\"\n          };\n        } else if (this.state.turn === \"white\") {\n          squares[50].style = { ...squares[50].style,\n            backgroundColor: \"\"\n          };\n          squares[51].style = { ...squares[51].style,\n            backgroundColor: \"\"\n          };\n          squares[52].style = { ...squares[52].style,\n            backgroundColor: \"\"\n          };\n          squares[53].style = { ...squares[53].style,\n            backgroundColor: \"\"\n          };\n        } //convert pawn to player selected piece\n\n\n        const newSquares = this.state.tempSquares;\n        newSquares[this.state.convertPawnPosition] = squares[i];\n        this.setState({\n          squares: newSquares,\n          status: \"\",\n          convertPawnPosition: undefined,\n          sourceSelection: -1\n        });\n      } else {\n        this.wrongMove(squares, \"Wrong selection. Choose valid source and destination again.\");\n      }\n    } else if (this.state.sourceSelection > -1) {\n      //dehighlight selected piece\n      squares[this.state.sourceSelection].style = { ...squares[this.state.sourceSelection].style,\n        backgroundColor: \"\"\n      };\n      const whiteFallenSoldiers = this.state.whiteFallenSoldiers;\n      const blackFallenSoldiers = this.state.blackFallenSoldiers;\n\n      if (squares[this.state.sourceSelection].name === \"Pawn\") {\n        squares = this.dehighlight(squares);\n        const enpassant = this.enpassant(this.state.sourceSelection);\n\n        if (this.state.highLightMoves.includes(i)) {\n          //if en passant is available and player decided to use it, else proceed without it\n          if (enpassant && squares[i] == null && (this.state.lastTurnPawnPosition - 8 === i || this.state.lastTurnPawnPosition + 8 === i)) {\n            //remove captured piece border color and add it to fallen soldier list\n            if (squares[this.state.lastTurnPawnPosition].player === 1) {\n              squares[this.state.lastTurnPawnPosition].style = { ...squares[this.state.lastTurnPawnPosition].style,\n                borderColor: \"transparent\"\n              };\n              whiteFallenSoldiers.push(squares[this.state.lastTurnPawnPosition]);\n            } else {\n              squares[this.state.lastTurnPawnPosition].style = { ...squares[this.state.lastTurnPawnPosition].style,\n                borderColor: \"transparent\"\n              };\n              blackFallenSoldiers.push(squares[this.state.lastTurnPawnPosition]);\n            } //move player selected piece to target position\n\n\n            squares[i] = squares[this.state.sourceSelection];\n            squares[this.state.lastTurnPawnPosition] = null;\n            squares[this.state.sourceSelection] = null; //update the possible moves in order to check if next player can castle or not\n\n            const allPossibleMovesWhite = this.allPossibleMovesWhite(squares);\n            const allPossibleMovesBlack = this.allPossibleMovesBlack(squares);\n            this.changeTurn();\n            this.setState({\n              sourceSelection: -1,\n              squares: squares,\n              whiteFallenSoldiers: whiteFallenSoldiers,\n              blackFallenSoldiers: blackFallenSoldiers,\n              status: '',\n              highLightMoves: [],\n              allPossibleMovesWhite: allPossibleMovesWhite,\n              allPossibleMovesBlack: allPossibleMovesBlack\n            });\n          } else {\n            //check if current pawn is moving for the first time and moving 2 squares forward\n            let firstMove;\n\n            if (squares[this.state.sourceSelection].name === \"Pawn\") {\n              if (squares[this.state.sourceSelection].player === 1 && i === this.state.sourceSelection - 16) {\n                firstMove = true;\n              } else if (squares[this.state.sourceSelection].player === 2 && i === this.state.sourceSelection + 16) {\n                firstMove = true;\n              }\n            } //record current pawn position for next turn to check en passant rule\n\n\n            let lastTurnPawnPosition = i;\n            this.addToFallenSoldierList(i, squares, whiteFallenSoldiers, blackFallenSoldiers);\n            squares = this.movePiece(i, squares, this.state.sourceSelection);\n            this.changeTurn(); //update the possible moves in order to check if next player can castle or not\n\n            const allPossibleMovesWhite = this.allPossibleMovesWhite(squares);\n            const allPossibleMovesBlack = this.allPossibleMovesBlack(squares); //to convert pawn that reach other side of the chess board\n\n            if ([0, 1, 2, 3, 4, 5, 6, 7, 56, 57, 58, 59, 60, 61, 62, 63].includes(i)) {\n              const tempSquares = squares.concat(); //give player choice to convert their pawn and highlight those choices\n\n              if (this.state.turn === \"white\") {\n                tempSquares[10] = new Knight(1);\n                tempSquares[10].style = { ...tempSquares[10].style,\n                  backgroundColor: \"RGB(111,143,114)\"\n                };\n                tempSquares[11] = new Bishop(1);\n                tempSquares[11].style = { ...tempSquares[11].style,\n                  backgroundColor: \"RGB(111,143,114)\"\n                };\n                tempSquares[12] = new Rook(1);\n                tempSquares[12].style = { ...tempSquares[12].style,\n                  backgroundColor: \"RGB(111,143,114)\"\n                };\n                tempSquares[13] = new Queen(1);\n                tempSquares[13].style = { ...tempSquares[13].style,\n                  backgroundColor: \"RGB(111,143,114)\"\n                };\n              } else if (this.state.turn === \"black\") {\n                tempSquares[50] = new Knight(2);\n                tempSquares[50].style = { ...tempSquares[50].style,\n                  backgroundColor: \"RGB(111,143,114)\"\n                };\n                tempSquares[51] = new Bishop(2);\n                tempSquares[51].style = { ...tempSquares[51].style,\n                  backgroundColor: \"RGB(111,143,114)\"\n                };\n                tempSquares[52] = new Rook(2);\n                tempSquares[52].style = { ...tempSquares[52].style,\n                  backgroundColor: \"RGB(111,143,114)\"\n                };\n                tempSquares[53] = new Queen(2);\n                tempSquares[53].style = { ...tempSquares[53].style,\n                  backgroundColor: \"RGB(111,143,114)\"\n                };\n              } //update chess board with convert choices and save chess board without choices in this.state.tempSquares\n\n\n              this.setState({\n                sourceSelection: -2,\n                tempSquares: squares,\n                squares: tempSquares,\n                status: \"\",\n                highLightMoves: [],\n                convertPawnPosition: i\n              });\n            } else {\n              this.setState({\n                sourceSelection: -1,\n                squares: squares,\n                status: \"\",\n                firstMove: firstMove,\n                lastTurnPawnPosition: lastTurnPawnPosition,\n                highLightMoves: [],\n                allPossibleMovesWhite: allPossibleMovesWhite,\n                allPossibleMovesBlack: allPossibleMovesBlack\n              });\n            }\n          }\n        } else {\n          this.wrongMove(squares, \"Wrong selection. Choose valid source and destination again.\");\n        }\n      } else if (squares[this.state.sourceSelection].name === \"King\") {\n        squares = this.dehighlight(squares); //for castling\n\n        if (this.state.highLightMoves.includes(i) && (i === 2 || i === 6 || i === 58 || i === 62) && (this.state.whiteKingFirstMove || this.state.blackKingFirstMove)) {\n          if (i === 58) {\n            squares = this.movePiece(i, squares, this.state.sourceSelection);\n            squares = this.movePiece(59, squares, 56);\n          }\n\n          if (i === 62) {\n            squares = this.movePiece(i, squares, this.state.sourceSelection);\n            squares = this.movePiece(61, squares, 63);\n          }\n\n          if (i === 2) {\n            squares = this.movePiece(i, squares, this.state.sourceSelection);\n            squares = this.movePiece(3, squares, 0);\n          }\n\n          if (i === 6) {\n            squares = this.movePiece(i, squares, this.state.sourceSelection);\n            squares = this.movePiece(5, squares, 7);\n          } //to record king has been moved or not. for castle\n\n\n          let whiteKingFirstMove = this.state.whiteKingFirstMove;\n          let blackKingFirstMove = this.state.blackKingFirstMove;\n\n          if (squares[i].name === \"King\" && this.state.sourceSelection === 60 && squares[i].player === 1) {\n            whiteKingFirstMove = false;\n          }\n\n          if (squares[i].name === \"King\" && this.state.sourceSelection === 4 && squares[i].player === 2) {\n            blackKingFirstMove = false;\n          }\n\n          this.kingPosition(i);\n          this.changeTurn();\n          this.setState({\n            sourceSelection: -1,\n            squares: squares,\n            status: '',\n            highLightMoves: [],\n            whiteKingFirstMove: whiteKingFirstMove,\n            blackKingFirstMove: blackKingFirstMove\n          });\n        } else if (this.state.highLightMoves.includes(i)) {\n          this.addToFallenSoldierList(i, squares, whiteFallenSoldiers, blackFallenSoldiers);\n          squares = this.movePiece(i, squares, this.state.sourceSelection);\n          this.kingPosition(i);\n          this.changeTurn(); //to record king has been moved or not. for castle\n\n          let whiteKingFirstMove = this.state.whiteKingFirstMove;\n          let blackKingFirstMove = this.state.blackKingFirstMove;\n\n          if (squares[i].name === \"King\" && this.state.sourceSelection === 60 && squares[i].player === 1) {\n            whiteKingFirstMove = false;\n          }\n\n          if (squares[i].name === \"King\" && this.state.sourceSelection === 4 && squares[i].player === 2) {\n            blackKingFirstMove = false;\n          }\n\n          this.setState({\n            sourceSelection: -1,\n            squares: squares,\n            status: '',\n            highLightMoves: [],\n            whiteKingFirstMove: whiteKingFirstMove,\n            blackKingFirstMove: blackKingFirstMove\n          });\n        } else {\n          this.wrongMove(squares, \"Wrong selection. Choose valid source and destination again.\");\n        }\n      } else {\n        squares = this.dehighlight(squares);\n\n        if (this.state.highLightMoves.includes(i)) {\n          this.addToFallenSoldierList(i, squares, whiteFallenSoldiers, blackFallenSoldiers);\n          squares = this.movePiece(i, squares, this.state.sourceSelection);\n          this.changeTurn(); //to record if rook has been moved or not. for castle.\n\n          let whiteRookFirstMoveLeft = this.state.whiteRookFirstMoveLeft;\n          let whiteRookFirstMoveRight = this.state.whiteRookFirstMoveRight;\n          let blackRookFirstMoveLeft = this.state.blackRookFirstMoveLeft;\n          let blackRookFirstMoveRight = this.state.blackRookFirstMoveRight;\n\n          if (squares[i].name === \"Rook\" && this.state.sourceSelection === 56 && squares[i].player === 1) {\n            whiteRookFirstMoveLeft = false;\n          }\n\n          if (squares[i].name === \"Rook\" && this.state.sourceSelection === 63 && squares[i].player === 1) {\n            whiteRookFirstMoveRight = false;\n          }\n\n          if (squares[i].name === \"Rook\" && this.state.sourceSelection === 0 && squares[i].player === 2) {\n            blackRookFirstMoveLeft = false;\n          }\n\n          if (squares[i].name === \"Rook\" && this.state.sourceSelection === 7 && squares[i].player === 2) {\n            blackRookFirstMoveRight = false;\n          } //update the possible moves in order to check if next player can castle or not\n\n\n          const allPossibleMovesWhite = this.allPossibleMovesWhite(squares);\n          const allPossibleMovesBlack = this.allPossibleMovesBlack(squares);\n          this.setState({\n            sourceSelection: -1,\n            squares: squares,\n            status: '',\n            highLightMoves: [],\n            whiteRookFirstMoveLeft: whiteRookFirstMoveLeft,\n            whiteRookFirstMoveRight: whiteRookFirstMoveRight,\n            blackRookFirstMoveLeft: blackRookFirstMoveLeft,\n            blackRookFirstMoveRight: blackRookFirstMoveRight,\n            allPossibleMovesWhite: allPossibleMovesWhite,\n            allPossibleMovesBlack: allPossibleMovesBlack\n          });\n        } else {\n          this.wrongMove(squares, \"Wrong selection. Choose valid source and destination again.\");\n        }\n      }\n    } //stalemate\n\n\n    console.log(\"black: \" + this.allPossibleMovesBlack(squares));\n    console.log(\"white: \" + this.allPossibleMovesWhite(squares));\n    console.log(squares);\n    console.log(\"after movechecker: \" + this.checkMovesVer2(squares, squares[this.state.whiteKingPosition].possibleMoves(this.state.whiteKingPosition, squares), this.state.whiteKingPosition));\n  } //to determine if its possible to do en passant capture\n\n\n  enpassant(selectedPawnPosition) {\n    let enpassant = false;\n\n    if (selectedPawnPosition - 1 === this.state.lastTurnPawnPosition || selectedPawnPosition + 1 === this.state.lastTurnPawnPosition) {\n      if (this.state.firstMove) {\n        enpassant = true;\n      }\n    }\n\n    return enpassant;\n  } //dehighlight possible moves\n\n\n  dehighlight(squares) {\n    for (let index = 0; index < this.state.highLightMoves.length; index++) {\n      const element = this.state.highLightMoves[index];\n\n      if (squares[element].name === \"Pawn\" || squares[element].name === \"Knight\" || squares[element].name === \"Rook\" || squares[element].name === \"Bishop\" || squares[element].name === \"Queen\" || squares[element].name === \"King\") {\n        squares[element].style = { ...squares[element].style,\n          backgroundColor: \"\"\n        };\n      } else {\n        squares[element] = null;\n      }\n    }\n\n    return squares;\n  } //add captured piece to fallen soldier list\n\n\n  addToFallenSoldierList(i, squares, whiteFallenSoldiers, blackFallenSoldiers) {\n    if (squares[i] !== null) {\n      if (squares[i].player === 1) {\n        whiteFallenSoldiers.push(squares[i]);\n      } else if (squares[i].player === 2) {\n        blackFallenSoldiers.push(squares[i]);\n      }\n    }\n\n    this.setState({\n      whiteFallenSoldiers: whiteFallenSoldiers,\n      blackFallenSoldiers: blackFallenSoldiers\n    });\n  } //move player selected piece to target position\n\n\n  movePiece(i, squares, sourceSelection) {\n    squares[i] = squares[sourceSelection];\n    squares[sourceSelection] = null;\n    return squares;\n  }\n\n  changeTurn() {\n    let player = this.state.player === 1 ? 2 : 1;\n    let turn = this.state.turn === 'white' ? 'black' : 'white';\n    this.setState({\n      player: player,\n      turn: turn\n    });\n  } //display message, and reset chess board\n\n\n  wrongMove(squares, status) {\n    this.setState({\n      status: status,\n      sourceSelection: -1,\n      highLightMoves: [],\n      squares: squares\n    });\n  } //give it the current chess board and return the possible moves\n\n\n  allPossibleMovesWhite(squares) {\n    const allPossibleMovesWhite = [];\n\n    for (let i = 0; i < squares.length; i++) {\n      if (squares[i] !== null) {\n        if (squares[i].player === 1) {\n          if (squares[i].name === \"Pawn\") {\n            let tempArray = squares[i].possibleCaptureMoves(i, squares);\n\n            for (let i = 0; i < tempArray.length; i++) {\n              allPossibleMovesWhite.push(tempArray[i]);\n            }\n          } else {\n            let tempArray = squares[i].possibleMoves(i, squares);\n\n            for (let i = 0; i < tempArray.length; i++) {\n              allPossibleMovesWhite.push(tempArray[i]);\n            }\n          }\n        }\n      }\n    }\n\n    allPossibleMovesWhite.sort();\n    const result = [];\n\n    for (let i = 0; i < allPossibleMovesWhite.length; i++) {\n      if (allPossibleMovesWhite[i] !== allPossibleMovesWhite[i + 1]) {\n        result.push(allPossibleMovesWhite[i]);\n      }\n    }\n\n    return result;\n  }\n\n  allPossibleMovesBlack(squares) {\n    const allPossibleMovesBlack = [];\n\n    for (let i = 0; i < squares.length; i++) {\n      if (squares[i] !== null) {\n        if (squares[i].player === 2) {\n          if (squares[i].name === \"Pawn\") {\n            let tempArray = squares[i].possibleCaptureMoves(i, squares);\n\n            for (let i = 0; i < tempArray.length; i++) {\n              allPossibleMovesBlack.push(tempArray[i]);\n            }\n          } else {\n            let tempArray = squares[i].possibleMoves(i, squares);\n\n            for (let i = 0; i < tempArray.length; i++) {\n              allPossibleMovesBlack.push(tempArray[i]);\n            }\n          }\n        }\n      }\n    }\n\n    allPossibleMovesBlack.sort();\n    const temp = [];\n\n    for (let i = 0; i < allPossibleMovesBlack.length; i++) {\n      if (allPossibleMovesBlack[i] !== allPossibleMovesBlack[i + 1]) {\n        temp.push(allPossibleMovesBlack[i]);\n      }\n    }\n\n    return temp;\n  } //record king position\n\n\n  kingPosition(i) {\n    let whiteKingPosition = this.state.whiteKingPosition;\n    let blackKingPosition = this.state.blackKingPosition;\n\n    if (this.state.turn === \"white\") {\n      whiteKingPosition = i;\n    } else if (this.state.turn === \"black\") {\n      blackKingPosition = i;\n    }\n\n    this.setState({\n      whiteKingPosition: whiteKingPosition,\n      blackKingPosition: blackKingPosition\n    });\n  } //to check if selected piece can move or not, e.g., if they move seleced piece and it will end up in checkmate\n\n\n  checkMovesVer2(squares, highLightMoves, i) {\n    const selectedPiece = i;\n    let king = false;\n\n    if (squares[selectedPiece].name === \"King\") {\n      king = true;\n    }\n\n    const newList = [];\n\n    for (let i = 0; i < highLightMoves.length; i++) {\n      let temp = squares.concat();\n      temp[highLightMoves[i]] = temp[selectedPiece];\n      temp[selectedPiece] = null;\n\n      if (!king) {\n        if (this.state.turn === \"white\") {\n          if (!this.allPossibleMovesBlack(temp).includes(this.state.whiteKingPosition)) {\n            newList.push(highLightMoves[i]);\n          }\n        } else if (this.state.turn === \"black\") {\n          if (!this.allPossibleMovesWhite(temp).includes(this.state.blackKingPosition)) {\n            newList.push(highLightMoves[i]);\n          }\n        }\n      } else if (king) {\n        if (this.state.turn === \"white\") {\n          if (!this.allPossibleMovesBlack(temp).includes(highLightMoves[i])) {\n            newList.push(highLightMoves[i]);\n          }\n        } else if (this.state.turn === \"black\") {\n          if (!this.allPossibleMovesWhite(temp).includes(highLightMoves[i])) {\n            newList.push(highLightMoves[i]);\n          }\n        }\n      }\n    }\n\n    return newList;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-board\",\n          children: /*#__PURE__*/_jsxDEV(Board, {\n            squares: this.state.squares,\n            onClick: i => this.handleClick(i)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 581,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Turn\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"player-turn-box\",\n            style: {\n              backgroundColor: this.state.turn\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 588,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"game-status\",\n            children: this.state.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"fallen-soldier-block\",\n            children: /*#__PURE__*/_jsxDEV(FallenSoldierBlock, {\n              whiteFallenSoldiers: this.state.whiteFallenSoldiers,\n              blackFallenSoldiers: this.state.blackFallenSoldiers\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 595,\n              columnNumber: 30\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 593,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icons-attribution\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"small\", {\n            children: [\" Chess Icons And Favicon (extracted) By en:User:Cburnett [\", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"http://www.gnu.org/copyleft/fdl.html\",\n              children: \"GFDL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 606,\n              columnNumber: 92\n            }, this), \", \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"http://creativecommons.org/licenses/by-sa/3.0/\",\n              children: \"CC-BY-SA-3.0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 606,\n              columnNumber: 149\n            }, this), \", \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"http://opensource.org/licenses/bsd-license.php\",\n              children: \"BSD\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 606,\n              columnNumber: 224\n            }, this), \" or \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"http://www.gnu.org/licenses/gpl.html\",\n              children: \"GPL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 606,\n              columnNumber: 292\n            }, this), \"], \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"https://commons.wikimedia.org/wiki/Category:SVG_chess_pieces\",\n              children: \"via Wikimedia Commons\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 606,\n              columnNumber: 349\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 606,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 578,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/terry/UUBC/React/Chess/src/components/game.js"],"names":["React","Board","FallenSoldierBlock","initialiseChessBoard","Queen","Knight","Bishop","Rook","Game","Component","constructor","state","squares","whiteFallenSoldiers","blackFallenSoldiers","player","sourceSelection","status","turn","lastTurnPawnPosition","undefined","firstMove","highLightMoves","allPossibleMovesWhite","allPossibleMovesBlack","whiteKingFirstMove","blackKingFirstMove","whiteRookFirstMoveLeft","whiteRookFirstMoveRight","blackRookFirstMoveLeft","blackRookFirstMoveRight","whiteKingPosition","blackKingPosition","tempSquares","convertPawnPosition","handleClick","i","setState","style","backgroundColor","some","element","includes","push","name","enpassant","checkMovesVer2","possibleMoves","concat","index","length","splice","newSquares","wrongMove","dehighlight","borderColor","changeTurn","addToFallenSoldierList","movePiece","kingPosition","console","log","selectedPawnPosition","tempArray","possibleCaptureMoves","sort","result","temp","selectedPiece","king","newList","render"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-expressions */\nimport React from 'react';\nimport '../index.css';\nimport Board from './board.js';\nimport FallenSoldierBlock from './fallensoldiers';\nimport initialiseChessBoard from '../helpers/initialiseChessBoard';\nimport Queen from '../pieces/queen';\nimport Knight from '../pieces/knight';\nimport Bishop from '../pieces/bishop';\nimport Rook from '../pieces/rook';\n\nexport default class Game extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            squares: initialiseChessBoard(),\n            whiteFallenSoldiers: [],\n            blackFallenSoldiers: [],\n            player: 1,\n            sourceSelection: -1,\n            status: '',\n            turn: 'white',\n            lastTurnPawnPosition: undefined,\n\n            //true === last turn enemy's pawn moved for the first time and it moved 2 squares forward. for en pasaant\n            firstMove: undefined,\n\n            highLightMoves: [],\n\n            //for castle\n            allPossibleMovesWhite: [],\n            allPossibleMovesBlack: [],\n            whiteKingFirstMove: true,\n            blackKingFirstMove: true,\n            whiteRookFirstMoveLeft: true,\n            whiteRookFirstMoveRight: true,\n            blackRookFirstMoveLeft: true,\n            blackRookFirstMoveRight: true,\n\n            whiteKingPosition: 60,\n            blackKingPosition: 4,\n\n            tempSquares: [],\n            convertPawnPosition: undefined\n        }\n    }\n\n    handleClick(i) {\n        let squares = this.state.squares;\n\n        if (this.state.sourceSelection === -1) {\n            let highLightMoves = [];\n            if (!squares[i] || squares[i].player !== this.state.player) {\n                this.setState({ status: \"Wrong selection. Choose player \" + this.state.player + \" pieces.\" });\n                squares[i] ? squares[i].style = { ...squares[i].style, backgroundColor: \"\" } : null;\n            } else {\n                //highlight selected piece\n                squares[i].style = { ...squares[i].style, backgroundColor: \"RGB(111,143,114)\" }; // Emerald from http://omgchess.blogspot.com/2015/09/chess-board-color-schemes.html\n\n                //check if castle is possible and add possible moves to highLightMoves array\n                if (i === 4 || i === 60) {\n                    if (this.state.turn === \"white\" && this.state.whiteKingFirstMove) {\n                        if (\n                            this.state.whiteRookFirstMoveLeft &&\n                            squares[57] === null &&\n                            squares[58] === null &&\n                            squares[59] === null &&\n                            !this.state.allPossibleMovesBlack.some(element => [57, 58, 59].includes(element))\n                        ) {\n                            highLightMoves.push(58);\n                        }\n                        if (\n                            this.state.whiteRookFirstMoveRight &&\n                            squares[61] === null &&\n                            squares[62] === null &&\n                            !this.state.allPossibleMovesBlack.some(element => [61, 62].includes(element))\n                        ) {\n                            highLightMoves.push(62);\n                        }\n                    } else if (this.state.turn === \"black\" && this.state.blackKingFirstMove) {\n                        if (\n                            this.state.blackRookFirstMoveLeft &&\n                            squares[1] === null &&\n                            squares[2] === null &&\n                            squares[3] === null &&\n                            !this.state.allPossibleMovesWhite.some(element => [1, 2, 3].includes(element))\n                        ) {\n                            highLightMoves.push(2);\n                        }\n                        if (\n                            this.state.blackRookFirstMoveRight &&\n                            squares[5] === null &&\n                            squares[6] === null &&\n                            !this.state.allPossibleMovesWhite.some(element => [5, 6].includes(element))\n                        ) {\n                            highLightMoves.push(6);\n                        }\n                    }\n                }\n\n                //highlight possible moves\n                if (squares[i].name === \"Pawn\") {\n                    const enpassant = this.enpassant(i);\n                    highLightMoves = this.checkMovesVer2(squares, squares[i].possibleMoves(i, squares, enpassant, this.state.lastTurnPawnPosition), i);\n                } else if (squares[i].name === \"King\") {\n                    highLightMoves = highLightMoves.concat(squares[i].possibleMoves(i, squares));\n                    highLightMoves = this.checkMovesVer2(squares, highLightMoves, i);\n\n                } else {\n                    highLightMoves = this.checkMovesVer2(squares, squares[i].possibleMoves(i, squares), i);\n                }\n                for (let index = 0; index < highLightMoves.length; index++) {\n                    const element = highLightMoves[index];\n                    if (squares[element] !== null) {\n                        squares[element].style = { ...squares[element].style, backgroundColor: \"RGB(111,143,114)\" };\n                    } else {\n                        squares.splice(element, 1, { style: { backgroundColor: \"RGB(111,143,114)\" } });\n                    }\n                }\n\n                this.setState({\n                    squares: squares,\n                    status: \"Choose destination for the selected piece\",\n                    sourceSelection: i,\n                    highLightMoves: highLightMoves\n                });\n            }\n        } else if (this.state.sourceSelection === -2) {\n\n            //to convert pawn that reach other side of the chess board\n            if ([10, 11, 12, 13, 50, 51, 52, 53].includes(i)) {\n\n                //dehighlight\n                if (this.state.turn === \"black\") {\n                    squares[10].style = { ...squares[10].style, backgroundColor: \"\" };\n                    squares[11].style = { ...squares[11].style, backgroundColor: \"\" };\n                    squares[12].style = { ...squares[12].style, backgroundColor: \"\" };\n                    squares[13].style = { ...squares[13].style, backgroundColor: \"\" };\n                } else if (this.state.turn === \"white\") {\n                    squares[50].style = { ...squares[50].style, backgroundColor: \"\" };\n                    squares[51].style = { ...squares[51].style, backgroundColor: \"\" };\n                    squares[52].style = { ...squares[52].style, backgroundColor: \"\" };\n                    squares[53].style = { ...squares[53].style, backgroundColor: \"\" };\n                }\n\n                //convert pawn to player selected piece\n                const newSquares = this.state.tempSquares;\n                newSquares[this.state.convertPawnPosition] = squares[i];\n\n                this.setState({\n                    squares: newSquares,\n                    status: \"\",\n                    convertPawnPosition: undefined,\n                    sourceSelection: -1\n                })\n            } else {\n                this.wrongMove(squares, \"Wrong selection. Choose valid source and destination again.\")\n            }\n        } else if (this.state.sourceSelection > -1) {\n            //dehighlight selected piece\n            squares[this.state.sourceSelection].style = { ...squares[this.state.sourceSelection].style, backgroundColor: \"\" };\n\n            const whiteFallenSoldiers = this.state.whiteFallenSoldiers;\n            const blackFallenSoldiers = this.state.blackFallenSoldiers;\n\n            if (squares[this.state.sourceSelection].name === \"Pawn\") {\n                squares = this.dehighlight(squares);\n                const enpassant = this.enpassant(this.state.sourceSelection);\n\n                if (this.state.highLightMoves.includes(i)) {\n                    //if en passant is available and player decided to use it, else proceed without it\n                    if (enpassant && squares[i] == null && (this.state.lastTurnPawnPosition - 8 === i || this.state.lastTurnPawnPosition + 8 === i)) {\n\n                        //remove captured piece border color and add it to fallen soldier list\n                        if (squares[this.state.lastTurnPawnPosition].player === 1) {\n                            squares[this.state.lastTurnPawnPosition].style = { ...squares[this.state.lastTurnPawnPosition].style, borderColor: \"transparent\" };\n                            whiteFallenSoldiers.push(squares[this.state.lastTurnPawnPosition]);\n                        }\n                        else {\n                            squares[this.state.lastTurnPawnPosition].style = { ...squares[this.state.lastTurnPawnPosition].style, borderColor: \"transparent\" };\n                            blackFallenSoldiers.push(squares[this.state.lastTurnPawnPosition]);\n                        }\n\n                        //move player selected piece to target position\n                        squares[i] = squares[this.state.sourceSelection];\n                        squares[this.state.lastTurnPawnPosition] = null;\n                        squares[this.state.sourceSelection] = null;\n\n                        //update the possible moves in order to check if next player can castle or not\n                        const allPossibleMovesWhite = this.allPossibleMovesWhite(squares);\n                        const allPossibleMovesBlack = this.allPossibleMovesBlack(squares);\n\n                        this.changeTurn();\n                        this.setState({\n                            sourceSelection: -1,\n                            squares: squares,\n                            whiteFallenSoldiers: whiteFallenSoldiers,\n                            blackFallenSoldiers: blackFallenSoldiers,\n                            status: '',\n                            highLightMoves: [],\n                            allPossibleMovesWhite: allPossibleMovesWhite,\n                            allPossibleMovesBlack: allPossibleMovesBlack\n                        });\n                    } else {\n                        //check if current pawn is moving for the first time and moving 2 squares forward\n                        let firstMove;\n                        if (squares[this.state.sourceSelection].name === \"Pawn\") {\n                            if (squares[this.state.sourceSelection].player === 1 && i === this.state.sourceSelection - 16) {\n                                firstMove = true;\n                            } else if (squares[this.state.sourceSelection].player === 2 && i === this.state.sourceSelection + 16) {\n                                firstMove = true;\n                            }\n                        }\n\n                        //record current pawn position for next turn to check en passant rule\n                        let lastTurnPawnPosition = i;\n\n                        this.addToFallenSoldierList(i, squares, whiteFallenSoldiers, blackFallenSoldiers);\n                        squares = this.movePiece(i, squares, this.state.sourceSelection);\n                        this.changeTurn();\n\n                        //update the possible moves in order to check if next player can castle or not\n                        const allPossibleMovesWhite = this.allPossibleMovesWhite(squares);\n                        const allPossibleMovesBlack = this.allPossibleMovesBlack(squares);\n\n                        //to convert pawn that reach other side of the chess board\n                        if ([0, 1, 2, 3, 4, 5, 6, 7, 56, 57, 58, 59, 60, 61, 62, 63].includes(i)) {\n                            const tempSquares = squares.concat();\n\n                            //give player choice to convert their pawn and highlight those choices\n                            if (this.state.turn === \"white\") {\n                                tempSquares[10] = new Knight(1);\n                                tempSquares[10].style = { ...tempSquares[10].style, backgroundColor: \"RGB(111,143,114)\" };\n                                tempSquares[11] = new Bishop(1);\n                                tempSquares[11].style = { ...tempSquares[11].style, backgroundColor: \"RGB(111,143,114)\" };\n                                tempSquares[12] = new Rook(1);\n                                tempSquares[12].style = { ...tempSquares[12].style, backgroundColor: \"RGB(111,143,114)\" };\n                                tempSquares[13] = new Queen(1);\n                                tempSquares[13].style = { ...tempSquares[13].style, backgroundColor: \"RGB(111,143,114)\" };\n                            } else if (this.state.turn === \"black\") {\n                                tempSquares[50] = new Knight(2);\n                                tempSquares[50].style = { ...tempSquares[50].style, backgroundColor: \"RGB(111,143,114)\" };\n                                tempSquares[51] = new Bishop(2);\n                                tempSquares[51].style = { ...tempSquares[51].style, backgroundColor: \"RGB(111,143,114)\" };\n                                tempSquares[52] = new Rook(2);\n                                tempSquares[52].style = { ...tempSquares[52].style, backgroundColor: \"RGB(111,143,114)\" };\n                                tempSquares[53] = new Queen(2);\n                                tempSquares[53].style = { ...tempSquares[53].style, backgroundColor: \"RGB(111,143,114)\" };\n                            }\n\n                            //update chess board with convert choices and save chess board without choices in this.state.tempSquares\n                            this.setState({\n                                sourceSelection: -2,\n                                tempSquares: squares,\n                                squares: tempSquares,\n                                status: \"\",\n                                highLightMoves: [],\n                                convertPawnPosition: i\n                            });\n                        } else {\n                            this.setState({\n                                sourceSelection: -1,\n                                squares: squares,\n                                status: \"\",\n                                firstMove: firstMove,\n                                lastTurnPawnPosition: lastTurnPawnPosition,\n                                highLightMoves: [],\n                                allPossibleMovesWhite: allPossibleMovesWhite,\n                                allPossibleMovesBlack: allPossibleMovesBlack\n                            });\n                        }\n                    }\n                } else {\n                    this.wrongMove(squares, \"Wrong selection. Choose valid source and destination again.\")\n                }\n            } else if (squares[this.state.sourceSelection].name === \"King\") {\n                squares = this.dehighlight(squares);\n\n                //for castling\n                if (this.state.highLightMoves.includes(i) && (i === 2 || i === 6 || i === 58 || i === 62) && (this.state.whiteKingFirstMove || this.state.blackKingFirstMove)) {\n                    if (i === 58) {\n                        squares = this.movePiece(i, squares, this.state.sourceSelection);\n                        squares = this.movePiece(59, squares, 56);\n                    }\n                    if (i === 62) {\n                        squares = this.movePiece(i, squares, this.state.sourceSelection);\n                        squares = this.movePiece(61, squares, 63);\n                    }\n                    if (i === 2) {\n                        squares = this.movePiece(i, squares, this.state.sourceSelection);\n                        squares = this.movePiece(3, squares, 0);\n                    }\n                    if (i === 6) {\n                        squares = this.movePiece(i, squares, this.state.sourceSelection);\n                        squares = this.movePiece(5, squares, 7);\n                    }\n\n                    //to record king has been moved or not. for castle\n                    let whiteKingFirstMove = this.state.whiteKingFirstMove;\n                    let blackKingFirstMove = this.state.blackKingFirstMove;\n                    if (squares[i].name === \"King\" && this.state.sourceSelection === 60 && squares[i].player === 1) {\n                        whiteKingFirstMove = false;\n                    }\n                    if (squares[i].name === \"King\" && this.state.sourceSelection === 4 && squares[i].player === 2) {\n                        blackKingFirstMove = false;\n                    }\n\n                    this.kingPosition(i);\n                    this.changeTurn();\n                    this.setState({\n                        sourceSelection: -1,\n                        squares: squares,\n                        status: '',\n                        highLightMoves: [],\n                        whiteKingFirstMove: whiteKingFirstMove,\n                        blackKingFirstMove: blackKingFirstMove\n                    });\n                } else if (this.state.highLightMoves.includes(i)) {\n                    this.addToFallenSoldierList(i, squares, whiteFallenSoldiers, blackFallenSoldiers);\n                    squares = this.movePiece(i, squares, this.state.sourceSelection);\n                    this.kingPosition(i);\n                    this.changeTurn();\n\n                    //to record king has been moved or not. for castle\n                    let whiteKingFirstMove = this.state.whiteKingFirstMove;\n                    let blackKingFirstMove = this.state.blackKingFirstMove;\n                    if (squares[i].name === \"King\" && this.state.sourceSelection === 60 && squares[i].player === 1) {\n                        whiteKingFirstMove = false;\n                    }\n                    if (squares[i].name === \"King\" && this.state.sourceSelection === 4 && squares[i].player === 2) {\n                        blackKingFirstMove = false;\n                    }\n\n                    this.setState({\n                        sourceSelection: -1,\n                        squares: squares,\n                        status: '',\n                        highLightMoves: [],\n                        whiteKingFirstMove: whiteKingFirstMove,\n                        blackKingFirstMove: blackKingFirstMove\n                    });\n                } else {\n                    this.wrongMove(squares, \"Wrong selection. Choose valid source and destination again.\")\n                }\n            } else {\n                squares = this.dehighlight(squares);\n                if (this.state.highLightMoves.includes(i)) {\n                    this.addToFallenSoldierList(i, squares, whiteFallenSoldiers, blackFallenSoldiers);\n                    squares = this.movePiece(i, squares, this.state.sourceSelection);\n                    this.changeTurn();\n\n                    //to record if rook has been moved or not. for castle.\n                    let whiteRookFirstMoveLeft = this.state.whiteRookFirstMoveLeft;\n                    let whiteRookFirstMoveRight = this.state.whiteRookFirstMoveRight;\n                    let blackRookFirstMoveLeft = this.state.blackRookFirstMoveLeft;\n                    let blackRookFirstMoveRight = this.state.blackRookFirstMoveRight;\n                    if (squares[i].name === \"Rook\" && this.state.sourceSelection === 56 && squares[i].player === 1) {\n                        whiteRookFirstMoveLeft = false;\n                    }\n                    if (squares[i].name === \"Rook\" && this.state.sourceSelection === 63 && squares[i].player === 1) {\n                        whiteRookFirstMoveRight = false;\n                    }\n                    if (squares[i].name === \"Rook\" && this.state.sourceSelection === 0 && squares[i].player === 2) {\n                        blackRookFirstMoveLeft = false;\n                    }\n                    if (squares[i].name === \"Rook\" && this.state.sourceSelection === 7 && squares[i].player === 2) {\n                        blackRookFirstMoveRight = false;\n                    }\n\n                    //update the possible moves in order to check if next player can castle or not\n                    const allPossibleMovesWhite = this.allPossibleMovesWhite(squares);\n                    const allPossibleMovesBlack = this.allPossibleMovesBlack(squares);\n\n                    this.setState({\n                        sourceSelection: -1,\n                        squares: squares,\n                        status: '',\n                        highLightMoves: [],\n                        whiteRookFirstMoveLeft: whiteRookFirstMoveLeft,\n                        whiteRookFirstMoveRight: whiteRookFirstMoveRight,\n                        blackRookFirstMoveLeft: blackRookFirstMoveLeft,\n                        blackRookFirstMoveRight: blackRookFirstMoveRight,\n                        allPossibleMovesWhite: allPossibleMovesWhite,\n                        allPossibleMovesBlack: allPossibleMovesBlack\n                    });\n                } else {\n                    this.wrongMove(squares, \"Wrong selection. Choose valid source and destination again.\")\n                }\n            }\n        }\n\n        //stalemate\n        console.log(\"black: \" + this.allPossibleMovesBlack(squares))\n        console.log(\"white: \" + this.allPossibleMovesWhite(squares))\n        console.log(squares)\n\n        console.log(\"after movechecker: \" + this.checkMovesVer2(squares, squares[this.state.whiteKingPosition].possibleMoves(this.state.whiteKingPosition, squares), this.state.whiteKingPosition))\n    }\n\n    //to determine if its possible to do en passant capture\n    enpassant(selectedPawnPosition) {\n        let enpassant = false;\n        if (selectedPawnPosition - 1 === this.state.lastTurnPawnPosition || selectedPawnPosition + 1 === this.state.lastTurnPawnPosition) {\n            if (this.state.firstMove) {\n                enpassant = true;\n            }\n        }\n        return enpassant;\n    }\n\n    //dehighlight possible moves\n    dehighlight(squares) {\n        for (let index = 0; index < this.state.highLightMoves.length; index++) {\n            const element = this.state.highLightMoves[index];\n            if (squares[element].name === \"Pawn\" || squares[element].name === \"Knight\" || squares[element].name === \"Rook\" || squares[element].name === \"Bishop\" || squares[element].name === \"Queen\" || squares[element].name === \"King\") {\n                squares[element].style = { ...squares[element].style, backgroundColor: \"\" };\n            } else {\n                squares[element] = null;\n            }\n        }\n        return squares;\n    }\n\n    //add captured piece to fallen soldier list\n    addToFallenSoldierList(i, squares, whiteFallenSoldiers, blackFallenSoldiers) {\n        if (squares[i] !== null) {\n            if (squares[i].player === 1) {\n                whiteFallenSoldiers.push(squares[i]);\n            }\n            else if (squares[i].player === 2) {\n                blackFallenSoldiers.push(squares[i]);\n            }\n        }\n        this.setState({\n            whiteFallenSoldiers: whiteFallenSoldiers,\n            blackFallenSoldiers: blackFallenSoldiers\n        })\n    }\n\n    //move player selected piece to target position\n    movePiece(i, squares, sourceSelection) {\n        squares[i] = squares[sourceSelection];\n        squares[sourceSelection] = null;\n        return squares;\n    }\n\n    changeTurn() {\n        let player = this.state.player === 1 ? 2 : 1;\n        let turn = this.state.turn === 'white' ? 'black' : 'white';\n        this.setState({\n            player: player,\n            turn: turn\n        })\n    }\n\n    //display message, and reset chess board\n    wrongMove(squares, status) {\n        this.setState({\n            status: status,\n            sourceSelection: -1,\n            highLightMoves: [],\n            squares: squares\n        });\n    }\n\n    //give it the current chess board and return the possible moves\n    allPossibleMovesWhite(squares) {\n        const allPossibleMovesWhite = [];\n        for (let i = 0; i < squares.length; i++) {\n            if (squares[i] !== null) {\n                if (squares[i].player === 1) {\n                    if (squares[i].name === \"Pawn\") {\n                        let tempArray = squares[i].possibleCaptureMoves(i, squares);\n                        for (let i = 0; i < tempArray.length; i++) {\n                            allPossibleMovesWhite.push(tempArray[i]);\n                        }\n                    } else {\n                        let tempArray = squares[i].possibleMoves(i, squares);\n                        for (let i = 0; i < tempArray.length; i++) {\n                            allPossibleMovesWhite.push(tempArray[i]);\n                        }\n                    }\n                }\n            }\n        }\n        allPossibleMovesWhite.sort();\n        const result = [];\n        for (let i = 0; i < allPossibleMovesWhite.length; i++) {\n            if (allPossibleMovesWhite[i] !== allPossibleMovesWhite[i + 1]) {\n                result.push(allPossibleMovesWhite[i]);\n            }\n        }\n        return result;\n    }\n    allPossibleMovesBlack(squares) {\n        const allPossibleMovesBlack = [];\n        for (let i = 0; i < squares.length; i++) {\n            if (squares[i] !== null) {\n                if (squares[i].player === 2) {\n                    if (squares[i].name === \"Pawn\") {\n                        let tempArray = squares[i].possibleCaptureMoves(i, squares);\n                        for (let i = 0; i < tempArray.length; i++) {\n                            allPossibleMovesBlack.push(tempArray[i]);\n                        }\n                    } else {\n                        let tempArray = squares[i].possibleMoves(i, squares);\n                        for (let i = 0; i < tempArray.length; i++) {\n                            allPossibleMovesBlack.push(tempArray[i]);\n                        }\n                    }\n                }\n            }\n        }\n        allPossibleMovesBlack.sort();\n        const temp = [];\n        for (let i = 0; i < allPossibleMovesBlack.length; i++) {\n            if (allPossibleMovesBlack[i] !== allPossibleMovesBlack[i + 1]) {\n                temp.push(allPossibleMovesBlack[i]);\n            }\n        }\n        return temp;\n    }\n\n    //record king position\n    kingPosition(i) {\n        let whiteKingPosition = this.state.whiteKingPosition;\n        let blackKingPosition = this.state.blackKingPosition;\n        if (this.state.turn === \"white\") {\n            whiteKingPosition = i;\n        } else if (this.state.turn === \"black\") {\n            blackKingPosition = i;\n        }\n        this.setState({\n            whiteKingPosition: whiteKingPosition,\n            blackKingPosition: blackKingPosition\n        })\n    }\n\n    //to check if selected piece can move or not, e.g., if they move seleced piece and it will end up in checkmate\n    checkMovesVer2(squares, highLightMoves, i) {\n        const selectedPiece = i;\n        let king = false;\n        if (squares[selectedPiece].name === \"King\") {\n            king = true;\n        }\n        const newList = [];\n        for (let i = 0; i < highLightMoves.length; i++) {\n            let temp = squares.concat();\n            temp[highLightMoves[i]] = temp[selectedPiece];\n            temp[selectedPiece] = null;\n            if (!king) {\n                if (this.state.turn === \"white\") {\n                    if (!this.allPossibleMovesBlack(temp).includes(this.state.whiteKingPosition)) {\n                        newList.push(highLightMoves[i]);\n                    }\n                } else if (this.state.turn === \"black\") {\n                    if (!this.allPossibleMovesWhite(temp).includes(this.state.blackKingPosition)) {\n                        newList.push(highLightMoves[i]);\n                    }\n                }\n            } else if (king) {\n                if (this.state.turn === \"white\") {\n                    if (!this.allPossibleMovesBlack(temp).includes(highLightMoves[i])) {\n                        newList.push(highLightMoves[i]);\n                    }\n                } else if (this.state.turn === \"black\") {\n                    if (!this.allPossibleMovesWhite(temp).includes(highLightMoves[i])) {\n                        newList.push(highLightMoves[i]);\n                    }\n                }\n            }\n        }\n        return newList;\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"game\">\n                    <div className=\"game-board\">\n                        <Board\n                            squares={this.state.squares}\n                            onClick={(i) => this.handleClick(i)}\n                        />\n                    </div>\n                    <div className=\"game-info\">\n                        <h3>Turn</h3>\n                        <div id=\"player-turn-box\" style={{ backgroundColor: this.state.turn }}>\n\n                        </div>\n                        <div className=\"game-status\">{this.state.status}</div>\n\n                        <div className=\"fallen-soldier-block\">\n\n                            {<FallenSoldierBlock\n                                whiteFallenSoldiers={this.state.whiteFallenSoldiers}\n                                blackFallenSoldiers={this.state.blackFallenSoldiers}\n                            />\n                            }\n                        </div>\n\n                    </div>\n                </div>\n\n                <div className=\"icons-attribution\">\n                    <div> <small> Chess Icons And Favicon (extracted) By en:User:Cburnett [<a href=\"http://www.gnu.org/copyleft/fdl.html\">GFDL</a>, <a href=\"http://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA-3.0</a>, <a href=\"http://opensource.org/licenses/bsd-license.php\">BSD</a> or <a href=\"http://www.gnu.org/licenses/gpl.html\">GPL</a>], <a href=\"https://commons.wikimedia.org/wiki/Category:SVG_chess_pieces\">via Wikimedia Commons</a> </small></div>\n                </div>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}