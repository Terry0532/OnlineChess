{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/terry/UUBC/React/Chess/src/components/game.js\";\n\n/* eslint-disable no-unused-expressions */\nimport React from 'react';\nimport '../index.css';\nimport Board from './board.js';\nimport FallenSoldierBlock from './fallensoldiers';\nimport initialiseChessBoard from '../helpers/initialiseChessBoard';\nexport default class Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      squares: initialiseChessBoard(),\n      whiteFallenSoldiers: [],\n      blackFallenSoldiers: [],\n      player: 1,\n      sourceSelection: -1,\n      status: '',\n      turn: 'white',\n      lastTurnPawnPosition: undefined,\n      //true === last turn enemy's pawn moved for the first time and it moved 2 squares forward. for en pasaant\n      firstMove: undefined,\n      highLightMoves: [],\n      //for castle\n      allPossibleMovesWhite: [],\n      allPossibleMovesBlack: [],\n      whiteKingFirstMove: true,\n      blackKingFirstMove: true,\n      whiteRookFirstMoveLeft: true,\n      whiteRookFirstMoveRight: true,\n      blackRookFirstMoveLeft: true,\n      blackRookFirstMoveRight: true\n    };\n  }\n\n  handleClick(i) {\n    let squares = this.state.squares;\n    const highLightMoves = this.state.highLightMoves; // console.log(\"left white rook: \" + this.state.whiteRookFirstMoveLeft);\n    // console.log(\"right white rook: \" + this.state.whiteRookFirstMoveRight);\n    // console.log(\"left black rook: \" + this.state.blackRookFirstMoveLeft);\n    // console.log(\"right black rook: \" + this.state.blackRookFirstMoveRight);\n    // console.log(\"white king: \" + this.state.whiteKingFirstMove);\n    // console.log(\"black king: \" + this.state.blackKingFirstMove);\n    // console.log(\"white possible moves: \" + this.state.allPossibleMovesWhite);\n    // console.log(\"black possible moves: \" + this.state.allPossibleMovesBlack);\n\n    if (this.state.sourceSelection === -1) {\n      if (!squares[i] || squares[i].player !== this.state.player) {\n        this.setState({\n          status: \"Wrong selection. Choose player \" + this.state.player + \" pieces.\"\n        });\n        squares[i] ? squares[i].style = { ...squares[i].style,\n          backgroundColor: \"\"\n        } : null;\n      } else {\n        //highlight selected piece\n        squares[i].style = { ...squares[i].style,\n          backgroundColor: \"RGB(111,143,114)\"\n        }; // Emerald from http://omgchess.blogspot.com/2015/09/chess-board-color-schemes.html\n        //check if castle is possible\n\n        if (this.state.turn === \"white\" && this.state.whiteKingFirstMove) {\n          if (this.state.whiteRookFirstMoveLeft && squares[57] === null && squares[58] === null && squares[59] === null && !this.state.allPossibleMovesBlack.some(element => [57, 58, 59].includes(element))) {\n            console.log(\"white left castle possible\");\n            highLightMoves.push(58);\n          }\n\n          if (this.state.whiteRookFirstMoveRight && squares[61] === null && squares[62] === null && !this.state.allPossibleMovesBlack.some(element => [61, 62].includes(element))) {\n            console.log(\"white right castle possible\");\n            highLightMoves.push(62);\n          }\n        } else if (this.state.blackKingFirstMove) {\n          if (this.state.blackRookFirstMoveLeft && squares[1] && squares[2] && squares[3] && !this.state.allPossibleMovesWhite.some(element => [1, 2, 3].includes(element))) {\n            console.log(\"black left castle possible\");\n            highLightMoves.push(2);\n          }\n\n          if (this.state.blackRookFirstMoveRight && squares[5] && squares[6] && !this.state.allPossibleMovesWhite.some(element => [5, 6].includes(element))) {\n            console.log(\"black right castle possible\");\n            highLightMoves.push(6);\n          }\n        } //highlight possible moves\n\n\n        let temp;\n\n        if (squares[i].name === \"Pawn\") {\n          const enpassant = this.enpassant(i);\n          temp = squares[i].possibleMoves(i, squares, enpassant, this.state.lastTurnPawnPosition);\n        } else if (squares[i].name === \"King\") {\n          temp = squares[i].possibleMoves(i, squares);\n          let temp2 = [];\n\n          if (squares[i].player === 1 && this.state.allPossibleMovesBlack.some(element => temp.includes(element))) {\n            for (let i = 0; i < temp.length; i++) {\n              for (let x = 0; x < this.state.allPossibleMovesBlack.length; x++) {\n                if (temp[i] !== this.state.allPossibleMovesBlack[x]) {\n                  console.log(temp[i]);\n                }\n              }\n            }\n          }\n        } else {\n          temp = squares[i].possibleMoves(i, squares);\n        }\n\n        for (let index = 0; index < temp.length; index++) {\n          const element = temp[index];\n          highLightMoves.push(element);\n        }\n\n        for (let index = 0; index < highLightMoves.length; index++) {\n          const element = highLightMoves[index];\n\n          if (squares[element] !== null) {\n            squares[element].style = { ...squares[element].style,\n              backgroundColor: \"RGB(111,143,114)\"\n            };\n          } else {\n            squares.splice(element, 1, {\n              style: {\n                backgroundColor: \"RGB(111,143,114)\"\n              }\n            });\n          }\n        }\n\n        this.setState({\n          squares: squares,\n          status: \"Choose destination for the selected piece\",\n          sourceSelection: i,\n          highLightMoves: highLightMoves\n        });\n      }\n    } else if (this.state.sourceSelection > -1) {\n      //dehighlight selected piece\n      squares[this.state.sourceSelection].style = { ...squares[this.state.sourceSelection].style,\n        backgroundColor: \"\"\n      };\n      const whiteFallenSoldiers = this.state.whiteFallenSoldiers;\n      const blackFallenSoldiers = this.state.blackFallenSoldiers;\n\n      if (squares[this.state.sourceSelection].name === \"Pawn\") {\n        squares = this.dehighlight(squares);\n        const enpassant = this.enpassant(this.state.sourceSelection);\n\n        if (this.state.highLightMoves.includes(i)) {\n          //if en passant is available and player decided to use it, else proceed without it\n          if (enpassant && squares[i] == null && (this.state.lastTurnPawnPosition - 8 === i || this.state.lastTurnPawnPosition + 8 === i)) {\n            //remove captured piece border color and add it to fallen soldier list\n            if (squares[this.state.lastTurnPawnPosition].player === 1) {\n              squares[this.state.lastTurnPawnPosition].style = { ...squares[this.state.lastTurnPawnPosition].style,\n                borderColor: \"transparent\"\n              };\n              whiteFallenSoldiers.push(squares[this.state.lastTurnPawnPosition]);\n            } else {\n              squares[this.state.lastTurnPawnPosition].style = { ...squares[this.state.lastTurnPawnPosition].style,\n                borderColor: \"transparent\"\n              };\n              blackFallenSoldiers.push(squares[this.state.lastTurnPawnPosition]);\n            } //move player selected piece to target position\n\n\n            squares[i] = squares[this.state.sourceSelection];\n            squares[this.state.lastTurnPawnPosition] = null;\n            squares[this.state.sourceSelection] = null; //update the possible moves in order to check if next player can castle or not\n\n            const allPossibleMovesWhite = this.allPossibleMovesWhite(squares);\n            const allPossibleMovesBlack = this.allPossibleMovesBlack(squares);\n            this.changeTurn();\n            this.setState({\n              sourceSelection: -1,\n              squares: squares,\n              whiteFallenSoldiers: whiteFallenSoldiers,\n              blackFallenSoldiers: blackFallenSoldiers,\n              status: '',\n              highLightMoves: [],\n              allPossibleMovesWhite: allPossibleMovesWhite,\n              allPossibleMovesBlack: allPossibleMovesBlack\n            });\n          } else {\n            //check if current pawn is moving for the first time and moving 2 squares forward\n            let firstMove;\n\n            if (squares[this.state.sourceSelection].name === \"Pawn\") {\n              if (squares[this.state.sourceSelection].player === 1 && i === this.state.sourceSelection - 16) {\n                firstMove = true;\n              } else if (squares[this.state.sourceSelection].player === 2 && i === this.state.sourceSelection + 16) {\n                firstMove = true;\n              }\n            } //record current pawn position for next turn to check en passant rule\n\n\n            let lastTurnPawnPosition = i;\n            this.addToFallenSoldierList(i, squares, whiteFallenSoldiers, blackFallenSoldiers);\n            squares = this.movePiece(i, squares);\n            this.changeTurn(); //update the possible moves in order to check if next player can castle or not\n\n            const allPossibleMovesWhite = this.allPossibleMovesWhite(squares);\n            const allPossibleMovesBlack = this.allPossibleMovesBlack(squares);\n            this.setState({\n              sourceSelection: -1,\n              squares: squares,\n              status: '',\n              firstMove: firstMove,\n              lastTurnPawnPosition: lastTurnPawnPosition,\n              highLightMoves: [],\n              allPossibleMovesWhite: allPossibleMovesWhite,\n              allPossibleMovesBlack: allPossibleMovesBlack\n            });\n          }\n        } else {\n          this.wrongMove(squares, \"Wrong selection. Choose valid source and destination again.\");\n        }\n      } else if (squares[this.state.sourceSelection].name === \"King\") {\n        squares = this.dehighlight(squares);\n\n        if (this.state.highLightMoves.includes(i)) {\n          this.addToFallenSoldierList(i, squares, whiteFallenSoldiers, blackFallenSoldiers);\n          squares = this.movePiece(i, squares);\n          this.changeTurn(); //to record king has been moved or not. for castle\n\n          let whiteKingFirstMove = this.state.whiteKingFirstMove;\n          let blackKingFirstMove = this.state.blackKingFirstMove;\n\n          if (squares[i].name === \"King\" && this.state.sourceSelection === 60 && squares[i].player === 1) {\n            whiteKingFirstMove = false;\n          }\n\n          if (squares[i].name === \"King\" && this.state.sourceSelection === 4 && squares[i].player === 2) {\n            blackKingFirstMove = false;\n          }\n\n          this.setState({\n            sourceSelection: -1,\n            squares: squares,\n            status: '',\n            highLightMoves: [],\n            whiteKingFirstMove: whiteKingFirstMove,\n            blackKingFirstMove: blackKingFirstMove\n          });\n        } else {\n          this.wrongMove(squares, \"Wrong selection. Choose valid source and destination again.\");\n        }\n      } else {\n        squares = this.dehighlight(squares);\n\n        if (this.state.highLightMoves.includes(i)) {\n          this.addToFallenSoldierList(i, squares, whiteFallenSoldiers, blackFallenSoldiers);\n          squares = this.movePiece(i, squares);\n          this.changeTurn(); //to record if rook has been moved or not. for castle.\n\n          let whiteRookFirstMoveLeft = this.state.whiteRookFirstMoveLeft;\n          let whiteRookFirstMoveRight = this.state.whiteRookFirstMoveRight;\n          let blackRookFirstMoveLeft = this.state.blackRookFirstMoveLeft;\n          let blackRookFirstMoveRight = this.state.blackRookFirstMoveRight;\n\n          if (squares[i].name === \"Rook\" && this.state.sourceSelection === 56 && squares[i].player === 1) {\n            whiteRookFirstMoveLeft = false;\n          }\n\n          if (squares[i].name === \"Rook\" && this.state.sourceSelection === 63 && squares[i].player === 1) {\n            whiteRookFirstMoveRight = false;\n          }\n\n          if (squares[i].name === \"Rook\" && this.state.sourceSelection === 0 && squares[i].player === 2) {\n            blackRookFirstMoveLeft = false;\n          }\n\n          if (squares[i].name === \"Rook\" && this.state.sourceSelection === 7 && squares[i].player === 2) {\n            blackRookFirstMoveRight = false;\n          } //update the possible moves in order to check if next player can castle or not\n\n\n          const allPossibleMovesWhite = this.allPossibleMovesWhite(squares);\n          const allPossibleMovesBlack = this.allPossibleMovesBlack(squares);\n          this.setState({\n            sourceSelection: -1,\n            squares: squares,\n            status: '',\n            highLightMoves: [],\n            whiteRookFirstMoveLeft: whiteRookFirstMoveLeft,\n            whiteRookFirstMoveRight: whiteRookFirstMoveRight,\n            blackRookFirstMoveLeft: blackRookFirstMoveLeft,\n            blackRookFirstMoveRight: blackRookFirstMoveRight,\n            allPossibleMovesWhite: allPossibleMovesWhite,\n            allPossibleMovesBlack: allPossibleMovesBlack\n          });\n        } else {\n          this.wrongMove(squares, \"Wrong selection. Choose valid source and destination again.\");\n        }\n      }\n    }\n  } //to determine if its possible to do en passant capture\n\n\n  enpassant(selectedPawnPosition) {\n    let enpassant = false;\n\n    if (selectedPawnPosition - 1 === this.state.lastTurnPawnPosition || selectedPawnPosition + 1 === this.state.lastTurnPawnPosition) {\n      if (this.state.firstMove) {\n        enpassant = true;\n      }\n    }\n\n    return enpassant;\n  } //dehighlight possible moves\n\n\n  dehighlight(squares) {\n    for (let index = 0; index < this.state.highLightMoves.length; index++) {\n      const element = this.state.highLightMoves[index];\n\n      if (squares[element].name === \"Pawn\" || squares[element].name === \"Knight\" || squares[element].name === \"Rook\" || squares[element].name === \"Bishop\" || squares[element].name === \"Queen\" || squares[element].name === \"King\") {\n        squares[element].style = { ...squares[element].style,\n          backgroundColor: \"\"\n        };\n      } else {\n        squares[element] = null;\n      }\n    }\n\n    return squares;\n  } //remove captured piece border color and add it to fallen soldier list\n\n\n  addToFallenSoldierList(i, squares, whiteFallenSoldiers, blackFallenSoldiers) {\n    if (squares[i] !== null) {\n      if (squares[i].player === 1) {\n        squares[i].style = { ...squares[i].style,\n          borderColor: \"transparent\"\n        };\n        whiteFallenSoldiers.push(squares[i]);\n      } else {\n        squares[i].style = { ...squares[i].style,\n          borderColor: \"transparent\"\n        };\n        blackFallenSoldiers.push(squares[i]);\n      }\n    }\n\n    this.setState({\n      whiteFallenSoldiers: whiteFallenSoldiers,\n      blackFallenSoldiers: blackFallenSoldiers\n    });\n  } //move player selected piece to target position\n\n\n  movePiece(i, squares) {\n    squares[i] = squares[this.state.sourceSelection];\n    squares[this.state.sourceSelection] = null;\n    return squares;\n  }\n\n  changeTurn() {\n    let player = this.state.player === 1 ? 2 : 1;\n    let turn = this.state.turn === 'white' ? 'black' : 'white';\n    this.setState({\n      player: player,\n      turn: turn\n    });\n  } //display message, and reset chess board\n\n\n  wrongMove(squares, status) {\n    this.setState({\n      status: status,\n      sourceSelection: -1,\n      highLightMoves: [],\n      squares: squares\n    });\n  } //give it the current chess board and return the possible moves\n\n\n  allPossibleMovesWhite(squares) {\n    const allPossibleMovesWhite = [];\n\n    for (let i = 0; i < squares.length; i++) {\n      if (squares[i] !== null) {\n        if (squares[i].player === 1) {\n          if (squares[i].name === \"Pawn\") {\n            let tempArray = squares[i].possibleCaptureMoves(i, squares);\n\n            for (let i = 0; i < tempArray.length; i++) {\n              allPossibleMovesWhite.push(tempArray[i]);\n            }\n          } else {\n            let tempArray = squares[i].possibleMoves(i, squares);\n\n            for (let i = 0; i < tempArray.length; i++) {\n              allPossibleMovesWhite.push(tempArray[i]);\n            }\n          }\n        }\n      }\n    }\n\n    allPossibleMovesWhite.sort();\n    const temp = [];\n\n    for (let i = 0; i < allPossibleMovesWhite.length; i++) {\n      if (allPossibleMovesWhite[i] !== allPossibleMovesWhite[i + 1]) {\n        temp.push(allPossibleMovesWhite[i]);\n      }\n    }\n\n    return temp;\n  }\n\n  allPossibleMovesBlack(squares) {\n    const allPossibleMovesBlack = [];\n\n    for (let i = 0; i < squares.length; i++) {\n      if (squares[i] !== null) {\n        if (squares[i].player === 2) {\n          if (squares[i].name === \"Pawn\") {\n            let tempArray = squares[i].possibleCaptureMoves(i, squares);\n\n            for (let i = 0; i < tempArray.length; i++) {\n              allPossibleMovesBlack.push(tempArray[i]);\n            }\n          } else {\n            let tempArray = squares[i].possibleMoves(i, squares);\n\n            for (let i = 0; i < tempArray.length; i++) {\n              allPossibleMovesBlack.push(tempArray[i]);\n            }\n          }\n        }\n      }\n    }\n\n    allPossibleMovesBlack.sort();\n    const temp = [];\n\n    for (let i = 0; i < allPossibleMovesBlack.length; i++) {\n      if (allPossibleMovesBlack[i] !== allPossibleMovesBlack[i + 1]) {\n        temp.push(allPossibleMovesBlack[i]);\n      }\n    }\n\n    return temp;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-board\",\n          children: /*#__PURE__*/_jsxDEV(Board, {\n            squares: this.state.squares,\n            onClick: i => this.handleClick(i)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Turn\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"player-turn-box\",\n            style: {\n              backgroundColor: this.state.turn\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"game-status\",\n            children: this.state.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"fallen-soldier-block\",\n            children: /*#__PURE__*/_jsxDEV(FallenSoldierBlock, {\n              whiteFallenSoldiers: this.state.whiteFallenSoldiers,\n              blackFallenSoldiers: this.state.blackFallenSoldiers\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 30\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icons-attribution\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"small\", {\n            children: [\" Chess Icons And Favicon (extracted) By en:User:Cburnett [\", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"http://www.gnu.org/copyleft/fdl.html\",\n              children: \"GFDL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 92\n            }, this), \", \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"http://creativecommons.org/licenses/by-sa/3.0/\",\n              children: \"CC-BY-SA-3.0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 149\n            }, this), \", \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"http://opensource.org/licenses/bsd-license.php\",\n              children: \"BSD\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 224\n            }, this), \" or \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"http://www.gnu.org/licenses/gpl.html\",\n              children: \"GPL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 292\n            }, this), \"], \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"https://commons.wikimedia.org/wiki/Category:SVG_chess_pieces\",\n              children: \"via Wikimedia Commons\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 349\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/terry/UUBC/React/Chess/src/components/game.js"],"names":["React","Board","FallenSoldierBlock","initialiseChessBoard","Game","Component","constructor","state","squares","whiteFallenSoldiers","blackFallenSoldiers","player","sourceSelection","status","turn","lastTurnPawnPosition","undefined","firstMove","highLightMoves","allPossibleMovesWhite","allPossibleMovesBlack","whiteKingFirstMove","blackKingFirstMove","whiteRookFirstMoveLeft","whiteRookFirstMoveRight","blackRookFirstMoveLeft","blackRookFirstMoveRight","handleClick","i","setState","style","backgroundColor","some","element","includes","console","log","push","temp","name","enpassant","possibleMoves","temp2","length","x","index","splice","dehighlight","borderColor","changeTurn","addToFallenSoldierList","movePiece","wrongMove","selectedPawnPosition","tempArray","possibleCaptureMoves","sort","render"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-expressions */\nimport React from 'react';\nimport '../index.css';\nimport Board from './board.js';\nimport FallenSoldierBlock from './fallensoldiers';\nimport initialiseChessBoard from '../helpers/initialiseChessBoard';\n\nexport default class Game extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            squares: initialiseChessBoard(),\n            whiteFallenSoldiers: [],\n            blackFallenSoldiers: [],\n            player: 1,\n            sourceSelection: -1,\n            status: '',\n            turn: 'white',\n            lastTurnPawnPosition: undefined,\n\n            //true === last turn enemy's pawn moved for the first time and it moved 2 squares forward. for en pasaant\n            firstMove: undefined,\n\n            highLightMoves: [],\n\n            //for castle\n            allPossibleMovesWhite: [],\n            allPossibleMovesBlack: [],\n            whiteKingFirstMove: true,\n            blackKingFirstMove: true,\n            whiteRookFirstMoveLeft: true,\n            whiteRookFirstMoveRight: true,\n            blackRookFirstMoveLeft: true,\n            blackRookFirstMoveRight: true\n        }\n    }\n\n    handleClick(i) {\n        let squares = this.state.squares;\n        const highLightMoves = this.state.highLightMoves;\n\n        // console.log(\"left white rook: \" + this.state.whiteRookFirstMoveLeft);\n        // console.log(\"right white rook: \" + this.state.whiteRookFirstMoveRight);\n        // console.log(\"left black rook: \" + this.state.blackRookFirstMoveLeft);\n        // console.log(\"right black rook: \" + this.state.blackRookFirstMoveRight);\n        // console.log(\"white king: \" + this.state.whiteKingFirstMove);\n        // console.log(\"black king: \" + this.state.blackKingFirstMove);\n        // console.log(\"white possible moves: \" + this.state.allPossibleMovesWhite);\n        // console.log(\"black possible moves: \" + this.state.allPossibleMovesBlack);\n\n        if (this.state.sourceSelection === -1) {\n            if (!squares[i] || squares[i].player !== this.state.player) {\n                this.setState({ status: \"Wrong selection. Choose player \" + this.state.player + \" pieces.\" });\n                squares[i] ? squares[i].style = { ...squares[i].style, backgroundColor: \"\" } : null;\n            } else {\n                //highlight selected piece\n                squares[i].style = { ...squares[i].style, backgroundColor: \"RGB(111,143,114)\" }; // Emerald from http://omgchess.blogspot.com/2015/09/chess-board-color-schemes.html\n\n                //check if castle is possible\n                if (this.state.turn === \"white\" && this.state.whiteKingFirstMove) {\n                    if (\n                        this.state.whiteRookFirstMoveLeft &&\n                        squares[57] === null &&\n                        squares[58] === null &&\n                        squares[59] === null &&\n                        !this.state.allPossibleMovesBlack.some(element => [57, 58, 59].includes(element))\n                    ) {\n                        console.log(\"white left castle possible\");\n                        highLightMoves.push(58);\n                    }\n                    if (\n                        this.state.whiteRookFirstMoveRight &&\n                        squares[61] === null &&\n                        squares[62] === null &&\n                        !this.state.allPossibleMovesBlack.some(element => [61, 62].includes(element))\n                    ) {\n                        console.log(\"white right castle possible\");\n                        highLightMoves.push(62);\n                    }\n                } else if (this.state.blackKingFirstMove) {\n                    if (\n                        this.state.blackRookFirstMoveLeft &&\n                        squares[1] &&\n                        squares[2] &&\n                        squares[3] &&\n                        !this.state.allPossibleMovesWhite.some(element => [1, 2, 3].includes(element))\n                    ) {\n                        console.log(\"black left castle possible\");\n                        highLightMoves.push(2);\n                    }\n                    if (\n                        this.state.blackRookFirstMoveRight &&\n                        squares[5] &&\n                        squares[6] &&\n                        !this.state.allPossibleMovesWhite.some(element => [5, 6].includes(element))\n                    ) {\n                        console.log(\"black right castle possible\");\n                        highLightMoves.push(6);\n                    }\n                }\n\n                //highlight possible moves\n                let temp;\n                if (squares[i].name === \"Pawn\") {\n                    const enpassant = this.enpassant(i);\n                    temp = squares[i].possibleMoves(i, squares, enpassant, this.state.lastTurnPawnPosition);\n                } else if (squares[i].name === \"King\") {\n                    temp = squares[i].possibleMoves(i, squares);\n                    let temp2 = [];\n                    if (squares[i].player === 1 && this.state.allPossibleMovesBlack.some(element => temp.includes(element))) {\n                        for (let i = 0; i < temp.length; i++) {\n                            for (let x = 0; x < this.state.allPossibleMovesBlack.length; x++) {\n                                if (temp[i] !== this.state.allPossibleMovesBlack[x]) {\n                                    console.log(temp[i])\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    temp = squares[i].possibleMoves(i, squares);\n                }\n                for (let index = 0; index < temp.length; index++) {\n                    const element = temp[index];\n                    highLightMoves.push(element);\n                }\n                for (let index = 0; index < highLightMoves.length; index++) {\n                    const element = highLightMoves[index];\n                    if (squares[element] !== null) {\n                        squares[element].style = { ...squares[element].style, backgroundColor: \"RGB(111,143,114)\" };\n                    } else {\n                        squares.splice(element, 1, { style: { backgroundColor: \"RGB(111,143,114)\" } });\n                    }\n                }\n\n                this.setState({\n                    squares: squares,\n                    status: \"Choose destination for the selected piece\",\n                    sourceSelection: i,\n                    highLightMoves: highLightMoves\n                });\n            }\n        } else if (this.state.sourceSelection > -1) {\n            //dehighlight selected piece\n            squares[this.state.sourceSelection].style = { ...squares[this.state.sourceSelection].style, backgroundColor: \"\" };\n\n            const whiteFallenSoldiers = this.state.whiteFallenSoldiers;\n            const blackFallenSoldiers = this.state.blackFallenSoldiers;\n\n            if (squares[this.state.sourceSelection].name === \"Pawn\") {\n                squares = this.dehighlight(squares);\n                const enpassant = this.enpassant(this.state.sourceSelection);\n\n                if (this.state.highLightMoves.includes(i)) {\n                    //if en passant is available and player decided to use it, else proceed without it\n                    if (enpassant && squares[i] == null && (this.state.lastTurnPawnPosition - 8 === i || this.state.lastTurnPawnPosition + 8 === i)) {\n\n                        //remove captured piece border color and add it to fallen soldier list\n                        if (squares[this.state.lastTurnPawnPosition].player === 1) {\n                            squares[this.state.lastTurnPawnPosition].style = { ...squares[this.state.lastTurnPawnPosition].style, borderColor: \"transparent\" };\n                            whiteFallenSoldiers.push(squares[this.state.lastTurnPawnPosition]);\n                        }\n                        else {\n                            squares[this.state.lastTurnPawnPosition].style = { ...squares[this.state.lastTurnPawnPosition].style, borderColor: \"transparent\" };\n                            blackFallenSoldiers.push(squares[this.state.lastTurnPawnPosition]);\n                        }\n\n                        //move player selected piece to target position\n                        squares[i] = squares[this.state.sourceSelection];\n                        squares[this.state.lastTurnPawnPosition] = null;\n                        squares[this.state.sourceSelection] = null;\n\n                        //update the possible moves in order to check if next player can castle or not\n                        const allPossibleMovesWhite = this.allPossibleMovesWhite(squares);\n                        const allPossibleMovesBlack = this.allPossibleMovesBlack(squares);\n\n                        this.changeTurn();\n                        this.setState({\n                            sourceSelection: -1,\n                            squares: squares,\n                            whiteFallenSoldiers: whiteFallenSoldiers,\n                            blackFallenSoldiers: blackFallenSoldiers,\n                            status: '',\n                            highLightMoves: [],\n                            allPossibleMovesWhite: allPossibleMovesWhite,\n                            allPossibleMovesBlack: allPossibleMovesBlack\n                        });\n                    } else {\n                        //check if current pawn is moving for the first time and moving 2 squares forward\n                        let firstMove;\n                        if (squares[this.state.sourceSelection].name === \"Pawn\") {\n                            if (squares[this.state.sourceSelection].player === 1 && i === this.state.sourceSelection - 16) {\n                                firstMove = true;\n                            } else if (squares[this.state.sourceSelection].player === 2 && i === this.state.sourceSelection + 16) {\n                                firstMove = true;\n                            }\n                        }\n\n                        //record current pawn position for next turn to check en passant rule\n                        let lastTurnPawnPosition = i;\n\n                        this.addToFallenSoldierList(i, squares, whiteFallenSoldiers, blackFallenSoldiers);\n                        squares = this.movePiece(i, squares);\n                        this.changeTurn();\n\n                        //update the possible moves in order to check if next player can castle or not\n                        const allPossibleMovesWhite = this.allPossibleMovesWhite(squares);\n                        const allPossibleMovesBlack = this.allPossibleMovesBlack(squares);\n\n                        this.setState({\n                            sourceSelection: -1,\n                            squares: squares,\n                            status: '',\n                            firstMove: firstMove,\n                            lastTurnPawnPosition: lastTurnPawnPosition,\n                            highLightMoves: [],\n                            allPossibleMovesWhite: allPossibleMovesWhite,\n                            allPossibleMovesBlack: allPossibleMovesBlack\n                        });\n                    }\n                } else {\n                    this.wrongMove(squares, \"Wrong selection. Choose valid source and destination again.\")\n                }\n            } else if (squares[this.state.sourceSelection].name === \"King\") {\n                squares = this.dehighlight(squares);\n\n                if (this.state.highLightMoves.includes(i)) {\n                    this.addToFallenSoldierList(i, squares, whiteFallenSoldiers, blackFallenSoldiers);\n                    squares = this.movePiece(i, squares);\n                    this.changeTurn();\n\n                    //to record king has been moved or not. for castle\n                    let whiteKingFirstMove = this.state.whiteKingFirstMove;\n                    let blackKingFirstMove = this.state.blackKingFirstMove;\n                    if (squares[i].name === \"King\" && this.state.sourceSelection === 60 && squares[i].player === 1) {\n                        whiteKingFirstMove = false;\n                    }\n                    if (squares[i].name === \"King\" && this.state.sourceSelection === 4 && squares[i].player === 2) {\n                        blackKingFirstMove = false;\n                    }\n\n                    this.setState({\n                        sourceSelection: -1,\n                        squares: squares,\n                        status: '',\n                        highLightMoves: [],\n                        whiteKingFirstMove: whiteKingFirstMove,\n                        blackKingFirstMove: blackKingFirstMove\n                    });\n                } else {\n                    this.wrongMove(squares, \"Wrong selection. Choose valid source and destination again.\")\n                }\n            } else {\n                squares = this.dehighlight(squares);\n                if (this.state.highLightMoves.includes(i)) {\n                    this.addToFallenSoldierList(i, squares, whiteFallenSoldiers, blackFallenSoldiers);\n                    squares = this.movePiece(i, squares);\n                    this.changeTurn();\n\n                    //to record if rook has been moved or not. for castle.\n                    let whiteRookFirstMoveLeft = this.state.whiteRookFirstMoveLeft;\n                    let whiteRookFirstMoveRight = this.state.whiteRookFirstMoveRight;\n                    let blackRookFirstMoveLeft = this.state.blackRookFirstMoveLeft;\n                    let blackRookFirstMoveRight = this.state.blackRookFirstMoveRight;\n                    if (squares[i].name === \"Rook\" && this.state.sourceSelection === 56 && squares[i].player === 1) {\n                        whiteRookFirstMoveLeft = false;\n                    }\n                    if (squares[i].name === \"Rook\" && this.state.sourceSelection === 63 && squares[i].player === 1) {\n                        whiteRookFirstMoveRight = false;\n                    }\n                    if (squares[i].name === \"Rook\" && this.state.sourceSelection === 0 && squares[i].player === 2) {\n                        blackRookFirstMoveLeft = false;\n                    }\n                    if (squares[i].name === \"Rook\" && this.state.sourceSelection === 7 && squares[i].player === 2) {\n                        blackRookFirstMoveRight = false;\n                    }\n\n                    //update the possible moves in order to check if next player can castle or not\n                    const allPossibleMovesWhite = this.allPossibleMovesWhite(squares);\n                    const allPossibleMovesBlack = this.allPossibleMovesBlack(squares);\n\n                    this.setState({\n                        sourceSelection: -1,\n                        squares: squares,\n                        status: '',\n                        highLightMoves: [],\n                        whiteRookFirstMoveLeft: whiteRookFirstMoveLeft,\n                        whiteRookFirstMoveRight: whiteRookFirstMoveRight,\n                        blackRookFirstMoveLeft: blackRookFirstMoveLeft,\n                        blackRookFirstMoveRight: blackRookFirstMoveRight,\n                        allPossibleMovesWhite: allPossibleMovesWhite,\n                        allPossibleMovesBlack: allPossibleMovesBlack\n                    });\n                } else {\n                    this.wrongMove(squares, \"Wrong selection. Choose valid source and destination again.\")\n                }\n            }\n        }\n    }\n\n    //to determine if its possible to do en passant capture\n    enpassant(selectedPawnPosition) {\n        let enpassant = false;\n        if (selectedPawnPosition - 1 === this.state.lastTurnPawnPosition || selectedPawnPosition + 1 === this.state.lastTurnPawnPosition) {\n            if (this.state.firstMove) {\n                enpassant = true;\n            }\n        }\n        return enpassant;\n    }\n\n    //dehighlight possible moves\n    dehighlight(squares) {\n        for (let index = 0; index < this.state.highLightMoves.length; index++) {\n            const element = this.state.highLightMoves[index];\n            if (squares[element].name === \"Pawn\" || squares[element].name === \"Knight\" || squares[element].name === \"Rook\" || squares[element].name === \"Bishop\" || squares[element].name === \"Queen\" || squares[element].name === \"King\") {\n                squares[element].style = { ...squares[element].style, backgroundColor: \"\" };\n            } else {\n                squares[element] = null;\n            }\n        }\n        return squares;\n    }\n\n    //remove captured piece border color and add it to fallen soldier list\n    addToFallenSoldierList(i, squares, whiteFallenSoldiers, blackFallenSoldiers) {\n        if (squares[i] !== null) {\n            if (squares[i].player === 1) {\n                squares[i].style = { ...squares[i].style, borderColor: \"transparent\" };\n                whiteFallenSoldiers.push(squares[i]);\n            }\n            else {\n                squares[i].style = { ...squares[i].style, borderColor: \"transparent\" };\n                blackFallenSoldiers.push(squares[i]);\n            }\n        }\n        this.setState({\n            whiteFallenSoldiers: whiteFallenSoldiers,\n            blackFallenSoldiers: blackFallenSoldiers\n        })\n    }\n\n    //move player selected piece to target position\n    movePiece(i, squares) {\n        squares[i] = squares[this.state.sourceSelection];\n        squares[this.state.sourceSelection] = null;\n        return squares;\n    }\n\n    changeTurn() {\n        let player = this.state.player === 1 ? 2 : 1;\n        let turn = this.state.turn === 'white' ? 'black' : 'white';\n        this.setState({\n            player: player,\n            turn: turn\n        })\n    }\n\n    //display message, and reset chess board\n    wrongMove(squares, status) {\n        this.setState({\n            status: status,\n            sourceSelection: -1,\n            highLightMoves: [],\n            squares: squares\n        });\n    }\n\n    //give it the current chess board and return the possible moves\n    allPossibleMovesWhite(squares) {\n        const allPossibleMovesWhite = [];\n        for (let i = 0; i < squares.length; i++) {\n            if (squares[i] !== null) {\n                if (squares[i].player === 1) {\n                    if (squares[i].name === \"Pawn\") {\n                        let tempArray = squares[i].possibleCaptureMoves(i, squares);\n                        for (let i = 0; i < tempArray.length; i++) {\n                            allPossibleMovesWhite.push(tempArray[i]);\n                        }\n                    } else {\n                        let tempArray = squares[i].possibleMoves(i, squares);\n                        for (let i = 0; i < tempArray.length; i++) {\n                            allPossibleMovesWhite.push(tempArray[i]);\n                        }\n                    }\n                }\n            }\n        }\n        allPossibleMovesWhite.sort();\n        const temp = [];\n        for (let i = 0; i < allPossibleMovesWhite.length; i++) {\n            if (allPossibleMovesWhite[i] !== allPossibleMovesWhite[i + 1]) {\n                temp.push(allPossibleMovesWhite[i]);\n            }\n        }\n        return temp;\n    }\n    allPossibleMovesBlack(squares) {\n        const allPossibleMovesBlack = [];\n        for (let i = 0; i < squares.length; i++) {\n            if (squares[i] !== null) {\n                if (squares[i].player === 2) {\n                    if (squares[i].name === \"Pawn\") {\n                        let tempArray = squares[i].possibleCaptureMoves(i, squares);\n                        for (let i = 0; i < tempArray.length; i++) {\n                            allPossibleMovesBlack.push(tempArray[i]);\n                        }\n                    } else {\n                        let tempArray = squares[i].possibleMoves(i, squares);\n                        for (let i = 0; i < tempArray.length; i++) {\n                            allPossibleMovesBlack.push(tempArray[i]);\n                        }\n                    }\n                }\n            }\n        }\n        allPossibleMovesBlack.sort();\n        const temp = [];\n        for (let i = 0; i < allPossibleMovesBlack.length; i++) {\n            if (allPossibleMovesBlack[i] !== allPossibleMovesBlack[i + 1]) {\n                temp.push(allPossibleMovesBlack[i]);\n            }\n        }\n        return temp;\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"game\">\n                    <div className=\"game-board\">\n                        <Board\n                            squares={this.state.squares}\n                            onClick={(i) => this.handleClick(i)}\n                        />\n                    </div>\n                    <div className=\"game-info\">\n                        <h3>Turn</h3>\n                        <div id=\"player-turn-box\" style={{ backgroundColor: this.state.turn }}>\n\n                        </div>\n                        <div className=\"game-status\">{this.state.status}</div>\n\n                        <div className=\"fallen-soldier-block\">\n\n                            {<FallenSoldierBlock\n                                whiteFallenSoldiers={this.state.whiteFallenSoldiers}\n                                blackFallenSoldiers={this.state.blackFallenSoldiers}\n                            />\n                            }\n                        </div>\n\n                    </div>\n                </div>\n\n                <div className=\"icons-attribution\">\n                    <div> <small> Chess Icons And Favicon (extracted) By en:User:Cburnett [<a href=\"http://www.gnu.org/copyleft/fdl.html\">GFDL</a>, <a href=\"http://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA-3.0</a>, <a href=\"http://opensource.org/licenses/bsd-license.php\">BSD</a> or <a href=\"http://www.gnu.org/licenses/gpl.html\">GPL</a>], <a href=\"https://commons.wikimedia.org/wiki/Category:SVG_chess_pieces\">via Wikimedia Commons</a> </small></div>\n                </div>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}