{"ast":null,"code":"import Piece from './piece.js';\nexport default class Queen extends Piece {\n  constructor(player) {\n    super(player, player === 1 ? \"https://upload.wikimedia.org/wikipedia/commons/1/15/Chess_qlt45.svg\" : \"https://upload.wikimedia.org/wikipedia/commons/4/47/Chess_qdt45.svg\");\n  }\n\n  isMovePossible(src, dest) {\n    let mod = src % 8;\n    let diff = 8 - mod;\n    return Math.abs(src - dest) % 9 === 0 || Math.abs(src - dest) % 7 === 0 || Math.abs(src - dest) % 8 === 0 || dest >= src - mod && dest < src + diff;\n  }\n  /**\n   * get path between src and dest (src and dest exclusive)\n   * @param  {num} src  \n   * @param  {num} dest \n   * @return {[array]}      \n   */\n\n\n  getSrcToDestPath(src, dest) {\n    let path = [],\n        pathStart,\n        pathEnd,\n        incrementBy;\n\n    if (src > dest) {\n      pathStart = dest;\n      pathEnd = src;\n    } else {\n      pathStart = src;\n      pathEnd = dest;\n    }\n\n    if (Math.abs(src - dest) % 8 === 0) {\n      incrementBy = 8;\n      pathStart += 8;\n    } else if (Math.abs(src - dest) % 9 === 0) {\n      incrementBy = 9;\n      pathStart += 9;\n    } else if (Math.abs(src - dest) % 7 === 0) {\n      incrementBy = 7;\n      pathStart += 7;\n    } else {\n      incrementBy = 1;\n      pathStart += 1;\n    }\n\n    for (let i = pathStart; i < pathEnd; i += incrementBy) {\n      path.push(i);\n    }\n\n    return path;\n  }\n\n}","map":{"version":3,"sources":["/Users/terry/UUBC/React/Chess/src/pieces/queen.js"],"names":["Piece","Queen","constructor","player","isMovePossible","src","dest","mod","diff","Math","abs","getSrcToDestPath","path","pathStart","pathEnd","incrementBy","i","push"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AAEA,eAAe,MAAMC,KAAN,SAAoBD,KAApB,CAA0B;AACrCE,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,UAAMA,MAAN,EAAeA,MAAM,KAAK,CAAX,GAAe,qEAAf,GAAuF,qEAAtG;AACH;;AAEDC,EAAAA,cAAc,CAACC,GAAD,EAAMC,IAAN,EAAY;AACtB,QAAIC,GAAG,GAAGF,GAAG,GAAG,CAAhB;AACA,QAAIG,IAAI,GAAG,IAAID,GAAf;AAEA,WAAQE,IAAI,CAACC,GAAL,CAASL,GAAG,GAAGC,IAAf,IAAuB,CAAvB,KAA6B,CAA7B,IAAkCG,IAAI,CAACC,GAAL,CAASL,GAAG,GAAGC,IAAf,IAAuB,CAAvB,KAA6B,CAAhE,IACFG,IAAI,CAACC,GAAL,CAASL,GAAG,GAAGC,IAAf,IAAuB,CAAvB,KAA6B,CAA7B,IAAmCA,IAAI,IAAKD,GAAG,GAAGE,GAAf,IAAuBD,IAAI,GAAID,GAAG,GAAGG,IAD7E;AAEH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIG,EAAAA,gBAAgB,CAACN,GAAD,EAAMC,IAAN,EAAY;AACxB,QAAIM,IAAI,GAAG,EAAX;AAAA,QAAeC,SAAf;AAAA,QAA0BC,OAA1B;AAAA,QAAmCC,WAAnC;;AACA,QAAIV,GAAG,GAAGC,IAAV,EAAgB;AACZO,MAAAA,SAAS,GAAGP,IAAZ;AACAQ,MAAAA,OAAO,GAAGT,GAAV;AACH,KAHD,MAIK;AACDQ,MAAAA,SAAS,GAAGR,GAAZ;AACAS,MAAAA,OAAO,GAAGR,IAAV;AACH;;AACD,QAAIG,IAAI,CAACC,GAAL,CAASL,GAAG,GAAGC,IAAf,IAAuB,CAAvB,KAA6B,CAAjC,EAAoC;AAChCS,MAAAA,WAAW,GAAG,CAAd;AACAF,MAAAA,SAAS,IAAI,CAAb;AACH,KAHD,MAIK,IAAIJ,IAAI,CAACC,GAAL,CAASL,GAAG,GAAGC,IAAf,IAAuB,CAAvB,KAA6B,CAAjC,EAAoC;AACrCS,MAAAA,WAAW,GAAG,CAAd;AACAF,MAAAA,SAAS,IAAI,CAAb;AACH,KAHI,MAIA,IAAIJ,IAAI,CAACC,GAAL,CAASL,GAAG,GAAGC,IAAf,IAAuB,CAAvB,KAA6B,CAAjC,EAAoC;AACrCS,MAAAA,WAAW,GAAG,CAAd;AACAF,MAAAA,SAAS,IAAI,CAAb;AACH,KAHI,MAIA;AACDE,MAAAA,WAAW,GAAG,CAAd;AACAF,MAAAA,SAAS,IAAI,CAAb;AACH;;AAED,SAAK,IAAIG,CAAC,GAAGH,SAAb,EAAwBG,CAAC,GAAGF,OAA5B,EAAqCE,CAAC,IAAID,WAA1C,EAAuD;AACnDH,MAAAA,IAAI,CAACK,IAAL,CAAUD,CAAV;AACH;;AACD,WAAOJ,IAAP;AACH;;AAlDoC","sourcesContent":["import Piece from './piece.js';\n\nexport default class Queen extends Piece {\n    constructor(player) {\n        super(player, (player === 1 ? \"https://upload.wikimedia.org/wikipedia/commons/1/15/Chess_qlt45.svg\" : \"https://upload.wikimedia.org/wikipedia/commons/4/47/Chess_qdt45.svg\"));\n    }\n\n    isMovePossible(src, dest) {\n        let mod = src % 8;\n        let diff = 8 - mod;\n\n        return (Math.abs(src - dest) % 9 === 0 || Math.abs(src - dest) % 7 === 0) ||\n            (Math.abs(src - dest) % 8 === 0 || (dest >= (src - mod) && dest < (src + diff)));\n    }\n\n    /**\n     * get path between src and dest (src and dest exclusive)\n     * @param  {num} src  \n     * @param  {num} dest \n     * @return {[array]}      \n     */\n    getSrcToDestPath(src, dest) {\n        let path = [], pathStart, pathEnd, incrementBy;\n        if (src > dest) {\n            pathStart = dest;\n            pathEnd = src;\n        }\n        else {\n            pathStart = src;\n            pathEnd = dest;\n        }\n        if (Math.abs(src - dest) % 8 === 0) {\n            incrementBy = 8;\n            pathStart += 8;\n        }\n        else if (Math.abs(src - dest) % 9 === 0) {\n            incrementBy = 9;\n            pathStart += 9;\n        }\n        else if (Math.abs(src - dest) % 7 === 0) {\n            incrementBy = 7;\n            pathStart += 7;\n        }\n        else {\n            incrementBy = 1;\n            pathStart += 1;\n        }\n\n        for (let i = pathStart; i < pathEnd; i += incrementBy) {\n            path.push(i);\n        }\n        return path;\n    }\n}"]},"metadata":{},"sourceType":"module"}