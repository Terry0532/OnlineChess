{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/terry/UUBC/React/Chess/src/components/game.js\";\n\n/* eslint-disable no-unused-expressions */\nimport React from 'react';\nimport '../index.css';\nimport Board from './board.js';\nimport FallenSoldierBlock from './fallensoldiers';\nimport initialiseChessBoard from '../helpers/initialiseChessBoard';\nexport default class Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      squares: initialiseChessBoard(),\n      whiteFallenSoldiers: [],\n      blackFallenSoldiers: [],\n      player: 1,\n      sourceSelection: -1,\n      status: '',\n      turn: 'white',\n      lastTurnPawnPosition: undefined,\n      //pawn's first move and it moved 2 squares forward\n      firstMove: undefined,\n      highLightMoves: [],\n      allPossibleMovesWhite: [],\n      allPossibleMovesBlack: [],\n      whiteKingFirstMove: true,\n      blackKingFirstMove: true,\n      whiteRookFirstMoveLeft: true,\n      whiteRookFirstMoveRight: true,\n      blackRookFirstMoveLeft: true,\n      blackRookFirstMoveRight: true\n    };\n  }\n\n  handleClick(i) {\n    let squares = this.state.squares;\n    const highLightMoves = this.state.highLightMoves;\n    console.log(this.state.whiteRookFirstMoveLeft);\n    console.log(this.state.whiteRookFirstMoveRight);\n    console.log(this.state.blackRookFirstMoveLeft);\n    console.log(this.state.blackRookFirstMoveRight);\n\n    for (let i = 0; i < this.state.squares.length; i++) {\n      if (this.state.squares[i] !== null) {\n        if (this.state.squares[i].player === 1) {\n          if (this.state.squares[i].name === \"Pawn\") {\n            let tempArray = this.state.squares[i].possibleCaptureMoves(i, this.state.squares);\n\n            for (let i = 0; i < tempArray.length; i++) {\n              this.state.allPossibleMovesWhite.push(tempArray[i]);\n            }\n          } else {\n            let tempArray = this.state.squares[i].possibleMoves(i, this.state.squares);\n\n            for (let i = 0; i < tempArray.length; i++) {\n              this.state.allPossibleMovesWhite.push(tempArray[i]);\n            }\n          }\n        }\n      }\n    }\n\n    console.log(this.state.allPossibleMovesWhite.sort());\n\n    if (this.state.sourceSelection === -1) {\n      if (!squares[i] || squares[i].player !== this.state.player) {\n        this.setState({\n          status: \"Wrong selection. Choose player \" + this.state.player + \" pieces.\"\n        });\n        squares[i] ? squares[i].style = { ...squares[i].style,\n          backgroundColor: \"\"\n        } : null;\n      } else {\n        //highlight selected piece\n        squares[i].style = { ...squares[i].style,\n          backgroundColor: \"RGB(111,143,114)\"\n        }; // Emerald from http://omgchess.blogspot.com/2015/09/chess-board-color-schemes.html\n        //highlight possible moves\n\n        let temp;\n\n        if (squares[i].name === \"Pawn\") {\n          const enpassant = this.enpassant(i);\n          temp = squares[i].possibleMoves(i, squares, enpassant, this.state.lastTurnPawnPosition);\n        } else {\n          temp = squares[i].possibleMoves(i, squares);\n        }\n\n        for (let index = 0; index < temp.length; index++) {\n          const element = temp[index];\n          highLightMoves.push(element);\n        }\n\n        for (let index = 0; index < highLightMoves.length; index++) {\n          const element = highLightMoves[index];\n\n          if (squares[element] !== null) {\n            squares[element].style = { ...squares[element].style,\n              backgroundColor: \"RGB(111,143,114)\"\n            };\n          } else {\n            squares.splice(element, 1, {\n              style: {\n                backgroundColor: \"RGB(111,143,114)\"\n              }\n            });\n          }\n        }\n\n        this.setState({\n          squares: squares,\n          status: \"Choose destination for the selected piece\",\n          sourceSelection: i,\n          highLightMoves: highLightMoves\n        });\n      }\n    } else if (this.state.sourceSelection > -1) {\n      //dehighlight selected piece\n      squares[this.state.sourceSelection].style = { ...squares[this.state.sourceSelection].style,\n        backgroundColor: \"\"\n      };\n      const whiteFallenSoldiers = this.state.whiteFallenSoldiers;\n      const blackFallenSoldiers = this.state.blackFallenSoldiers;\n\n      if (squares[this.state.sourceSelection].name === \"Pawn\") {\n        squares = this.dehighlight(squares);\n        const enpassant = this.enpassant(this.state.sourceSelection);\n\n        if (this.state.highLightMoves.includes(i)) {\n          //if en passant is available and player decided to use it, else proceed without it\n          if (enpassant && squares[i] == null && (this.state.lastTurnPawnPosition - 8 === i || this.state.lastTurnPawnPosition + 8 === i)) {\n            if (squares[this.state.lastTurnPawnPosition].player === 1) {\n              squares[this.state.lastTurnPawnPosition].style = { ...squares[this.state.lastTurnPawnPosition].style,\n                borderColor: \"transparent\"\n              };\n              whiteFallenSoldiers.push(squares[this.state.lastTurnPawnPosition]);\n            } else {\n              squares[this.state.lastTurnPawnPosition].style = { ...squares[this.state.lastTurnPawnPosition].style,\n                borderColor: \"transparent\"\n              };\n              blackFallenSoldiers.push(squares[this.state.lastTurnPawnPosition]);\n            }\n\n            squares[i] = squares[this.state.sourceSelection];\n            squares[this.state.lastTurnPawnPosition] = null;\n            squares[this.state.sourceSelection] = null;\n            let player = this.state.player === 1 ? 2 : 1;\n            let turn = this.state.turn === 'white' ? 'black' : 'white';\n            this.setState({\n              sourceSelection: -1,\n              squares: squares,\n              whiteFallenSoldiers: whiteFallenSoldiers,\n              blackFallenSoldiers: blackFallenSoldiers,\n              player: player,\n              status: '',\n              turn: turn,\n              highLightMoves: []\n            });\n          } else {\n            if (squares[i] !== null) {\n              if (squares[i].player === 1) {\n                squares[i].style = { ...squares[i].style,\n                  borderColor: \"transparent\"\n                };\n                whiteFallenSoldiers.push(squares[i]);\n              } else {\n                squares[i].style = { ...squares[i].style,\n                  borderColor: \"transparent\"\n                };\n                blackFallenSoldiers.push(squares[i]);\n              }\n            } //check if current pawn is moving for the first time and moving 2 squares forward\n\n\n            let firstMove;\n\n            if (squares[this.state.sourceSelection].name === \"Pawn\") {\n              if (squares[this.state.sourceSelection].player === 1 && i === this.state.sourceSelection - 16) {\n                firstMove = true;\n              } else if (squares[this.state.sourceSelection].player === 2 && i === this.state.sourceSelection + 16) {\n                firstMove = true;\n              }\n            } //record current pawn position for next turn to check en passant rule\n\n\n            let lastTurnPawnPosition = i;\n            squares[i] = squares[this.state.sourceSelection];\n            squares[this.state.sourceSelection] = null;\n            let player = this.state.player === 1 ? 2 : 1;\n            let turn = this.state.turn === 'white' ? 'black' : 'white';\n            this.setState({\n              sourceSelection: -1,\n              squares: squares,\n              whiteFallenSoldiers: whiteFallenSoldiers,\n              blackFallenSoldiers: blackFallenSoldiers,\n              player: player,\n              status: '',\n              turn: turn,\n              firstMove: firstMove,\n              lastTurnPawnPosition: lastTurnPawnPosition,\n              highLightMoves: []\n            });\n          }\n        } else {\n          this.setState({\n            status: \"Wrong selection. Choose valid source and destination again.\",\n            sourceSelection: -1,\n            squares: squares,\n            highLightMoves: []\n          });\n        }\n      } else if (squares[this.state.sourceSelection].name === \"King\") {\n        squares = this.dehighlight(squares);\n\n        if (this.state.highLightMoves.includes(i)) {\n          if (squares[i] !== null) {\n            if (squares[i].player === 1) {\n              squares[i].style = { ...squares[i].style,\n                borderColor: \"transparent\"\n              };\n              whiteFallenSoldiers.push(squares[i]);\n            } else {\n              squares[i].style = { ...squares[i].style,\n                borderColor: \"transparent\"\n              };\n              blackFallenSoldiers.push(squares[i]);\n            }\n          }\n\n          squares[i] = squares[this.state.sourceSelection];\n          squares[this.state.sourceSelection] = null;\n          let player = this.state.player === 1 ? 2 : 1;\n          let turn = this.state.turn === 'white' ? 'black' : 'white';\n          this.setState({\n            sourceSelection: -1,\n            squares: squares,\n            whiteFallenSoldiers: whiteFallenSoldiers,\n            blackFallenSoldiers: blackFallenSoldiers,\n            player: player,\n            status: '',\n            turn: turn,\n            highLightMoves: []\n          });\n        } else {\n          this.setState({\n            status: \"Wrong selection. Choose valid source and destination again.\",\n            sourceSelection: -1,\n            highLightMoves: [],\n            squares: squares\n          });\n        }\n      } else {\n        squares = this.dehighlight(squares);\n\n        if (this.state.highLightMoves.includes(i)) {\n          if (squares[i] !== null) {\n            if (squares[i].player === 1) {\n              squares[i].style = { ...squares[i].style,\n                borderColor: \"transparent\"\n              };\n              whiteFallenSoldiers.push(squares[i]);\n            } else {\n              squares[i].style = { ...squares[i].style,\n                borderColor: \"transparent\"\n              };\n              blackFallenSoldiers.push(squares[i]);\n            }\n          }\n\n          squares[i] = squares[this.state.sourceSelection];\n          squares[this.state.sourceSelection] = null;\n          let player = this.state.player === 1 ? 2 : 1;\n          let turn = this.state.turn === 'white' ? 'black' : 'white'; //to record if rook has been moved or not. for castling.\n\n          let whiteRookFirstMoveLeft = this.state.whiteRookFirstMoveLeft;\n          let whiteRookFirstMoveRight = this.state.whiteRookFirstMoveRight;\n          let blackRookFirstMoveLeft = this.state.blackRookFirstMoveLeft;\n          let blackRookFirstMoveRight = this.state.blackRookFirstMoveRight;\n\n          if (squares[i].name === \"Rook\" && this.state.sourceSelection === 56 && squares[i].player === 1) {\n            whiteRookFirstMoveLeft = false;\n          }\n\n          console.log(i);\n          console.log(squares[i].name);\n          console.log(squares[i].player);\n\n          if (squares[i].name === \"Rook\" && this.state.sourceSelection === 63 && squares[i].player === 1) {\n            console.log(\"here\");\n            whiteRookFirstMoveRight = false;\n          }\n\n          if (squares[i].name === \"Rook\" && this.state.sourceSelection === 0 && squares[i].player === 2) {\n            blackRookFirstMoveLeft = false;\n          }\n\n          if (squares[i].name === \"Rook\" && this.state.sourceSelection === 7 && squares[i].player === 2) {\n            blackRookFirstMoveRight = false;\n          }\n\n          this.setState({\n            sourceSelection: -1,\n            squares: squares,\n            whiteFallenSoldiers: whiteFallenSoldiers,\n            blackFallenSoldiers: blackFallenSoldiers,\n            player: player,\n            status: '',\n            turn: turn,\n            highLightMoves: [],\n            whiteRookFirstMoveLeft: whiteRookFirstMoveLeft,\n            whiteRookFirstMoveRight: whiteRookFirstMoveRight,\n            blackRookFirstMoveLeft: blackRookFirstMoveLeft,\n            blackRookFirstMoveRight: blackRookFirstMoveRight\n          });\n        } else {\n          this.setState({\n            status: \"Wrong selection. Choose valid source and destination again.\",\n            sourceSelection: -1,\n            highLightMoves: [],\n            squares: squares\n          });\n        }\n      }\n    }\n  } //to determine if its possible to do en passant capture\n\n\n  enpassant(selectedPawnPosition) {\n    let enpassant = false;\n\n    if (selectedPawnPosition - 1 === this.state.lastTurnPawnPosition || selectedPawnPosition + 1 === this.state.lastTurnPawnPosition) {\n      if (this.state.firstMove) {\n        enpassant = true;\n      }\n    }\n\n    return enpassant;\n  } //dehighlight possible moves\n\n\n  dehighlight(squares) {\n    for (let index = 0; index < this.state.highLightMoves.length; index++) {\n      const element = this.state.highLightMoves[index];\n\n      if (squares[element].name === \"Pawn\" || squares[element].name === \"Knight\" || squares[element].name === \"Rook\" || squares[element].name === \"Bishop\" || squares[element].name === \"Queen\" || squares[element].name === \"King\") {\n        squares[element].style = { ...squares[element].style,\n          backgroundColor: \"\"\n        };\n      } else {\n        squares[element] = null;\n      }\n    }\n\n    return squares;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-board\",\n          children: /*#__PURE__*/_jsxDEV(Board, {\n            squares: this.state.squares,\n            onClick: i => this.handleClick(i)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Turn\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"player-turn-box\",\n            style: {\n              backgroundColor: this.state.turn\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"game-status\",\n            children: this.state.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"fallen-soldier-block\",\n            children: /*#__PURE__*/_jsxDEV(FallenSoldierBlock, {\n              whiteFallenSoldiers: this.state.whiteFallenSoldiers,\n              blackFallenSoldiers: this.state.blackFallenSoldiers\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 30\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icons-attribution\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"small\", {\n            children: [\" Chess Icons And Favicon (extracted) By en:User:Cburnett [\", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"http://www.gnu.org/copyleft/fdl.html\",\n              children: \"GFDL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 92\n            }, this), \", \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"http://creativecommons.org/licenses/by-sa/3.0/\",\n              children: \"CC-BY-SA-3.0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 149\n            }, this), \", \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"http://opensource.org/licenses/bsd-license.php\",\n              children: \"BSD\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 224\n            }, this), \" or \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"http://www.gnu.org/licenses/gpl.html\",\n              children: \"GPL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 292\n            }, this), \"], \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"https://commons.wikimedia.org/wiki/Category:SVG_chess_pieces\",\n              children: \"via Wikimedia Commons\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 349\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/terry/UUBC/React/Chess/src/components/game.js"],"names":["React","Board","FallenSoldierBlock","initialiseChessBoard","Game","Component","constructor","state","squares","whiteFallenSoldiers","blackFallenSoldiers","player","sourceSelection","status","turn","lastTurnPawnPosition","undefined","firstMove","highLightMoves","allPossibleMovesWhite","allPossibleMovesBlack","whiteKingFirstMove","blackKingFirstMove","whiteRookFirstMoveLeft","whiteRookFirstMoveRight","blackRookFirstMoveLeft","blackRookFirstMoveRight","handleClick","i","console","log","length","name","tempArray","possibleCaptureMoves","push","possibleMoves","sort","setState","style","backgroundColor","temp","enpassant","index","element","splice","dehighlight","includes","borderColor","selectedPawnPosition","render"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-expressions */\nimport React from 'react';\nimport '../index.css';\nimport Board from './board.js';\nimport FallenSoldierBlock from './fallensoldiers';\nimport initialiseChessBoard from '../helpers/initialiseChessBoard';\n\nexport default class Game extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            squares: initialiseChessBoard(),\n            whiteFallenSoldiers: [],\n            blackFallenSoldiers: [],\n            player: 1,\n            sourceSelection: -1,\n            status: '',\n            turn: 'white',\n            lastTurnPawnPosition: undefined,\n            //pawn's first move and it moved 2 squares forward\n            firstMove: undefined,\n            highLightMoves: [],\n            allPossibleMovesWhite: [],\n            allPossibleMovesBlack: [],\n            whiteKingFirstMove: true,\n            blackKingFirstMove: true,\n            whiteRookFirstMoveLeft: true,\n            whiteRookFirstMoveRight: true,\n            blackRookFirstMoveLeft: true,\n            blackRookFirstMoveRight: true\n        }\n    }\n\n    handleClick(i) {\n        let squares = this.state.squares;\n        const highLightMoves = this.state.highLightMoves;\n\n        console.log(this.state.whiteRookFirstMoveLeft);\n        console.log(this.state.whiteRookFirstMoveRight);\n        console.log(this.state.blackRookFirstMoveLeft);\n        console.log(this.state.blackRookFirstMoveRight);\n        for (let i = 0; i < this.state.squares.length; i++) {\n            if (this.state.squares[i] !== null) {\n                if (this.state.squares[i].player === 1) {\n                    if (this.state.squares[i].name === \"Pawn\") {\n                        let tempArray = this.state.squares[i].possibleCaptureMoves(i, this.state.squares);\n                        for (let i = 0; i < tempArray.length; i++) {\n                            this.state.allPossibleMovesWhite.push(tempArray[i]);\n                        }\n                    } else {\n                        let tempArray = this.state.squares[i].possibleMoves(i, this.state.squares);\n                        for (let i = 0; i < tempArray.length; i++) {\n                            this.state.allPossibleMovesWhite.push(tempArray[i]);\n                        }\n                    }\n                }\n            }\n        }\n        console.log(this.state.allPossibleMovesWhite.sort());\n\n        if (this.state.sourceSelection === -1) {\n            if (!squares[i] || squares[i].player !== this.state.player) {\n                this.setState({ status: \"Wrong selection. Choose player \" + this.state.player + \" pieces.\" });\n                squares[i] ? squares[i].style = { ...squares[i].style, backgroundColor: \"\" } : null;\n            } else {\n                //highlight selected piece\n                squares[i].style = { ...squares[i].style, backgroundColor: \"RGB(111,143,114)\" }; // Emerald from http://omgchess.blogspot.com/2015/09/chess-board-color-schemes.html\n\n                //highlight possible moves\n                let temp;\n                if (squares[i].name === \"Pawn\") {\n                    const enpassant = this.enpassant(i);\n                    temp = squares[i].possibleMoves(i, squares, enpassant, this.state.lastTurnPawnPosition);\n                } else {\n                    temp = squares[i].possibleMoves(i, squares);\n                }\n                for (let index = 0; index < temp.length; index++) {\n                    const element = temp[index];\n                    highLightMoves.push(element);\n                }\n                for (let index = 0; index < highLightMoves.length; index++) {\n                    const element = highLightMoves[index];\n                    if (squares[element] !== null) {\n                        squares[element].style = { ...squares[element].style, backgroundColor: \"RGB(111,143,114)\" };\n                    } else {\n                        squares.splice(element, 1, { style: { backgroundColor: \"RGB(111,143,114)\" } });\n                    }\n                }\n\n                this.setState({\n                    squares: squares,\n                    status: \"Choose destination for the selected piece\",\n                    sourceSelection: i,\n                    highLightMoves: highLightMoves\n                });\n            }\n        } else if (this.state.sourceSelection > -1) {\n            //dehighlight selected piece\n            squares[this.state.sourceSelection].style = { ...squares[this.state.sourceSelection].style, backgroundColor: \"\" };\n\n            const whiteFallenSoldiers = this.state.whiteFallenSoldiers;\n            const blackFallenSoldiers = this.state.blackFallenSoldiers;\n\n            if (squares[this.state.sourceSelection].name === \"Pawn\") {\n                squares = this.dehighlight(squares);\n                const enpassant = this.enpassant(this.state.sourceSelection);\n                if (this.state.highLightMoves.includes(i)) {\n                    //if en passant is available and player decided to use it, else proceed without it\n                    if (enpassant && squares[i] == null && (this.state.lastTurnPawnPosition - 8 === i || this.state.lastTurnPawnPosition + 8 === i)) {\n                        if (squares[this.state.lastTurnPawnPosition].player === 1) {\n                            squares[this.state.lastTurnPawnPosition].style = { ...squares[this.state.lastTurnPawnPosition].style, borderColor: \"transparent\" };\n                            whiteFallenSoldiers.push(squares[this.state.lastTurnPawnPosition]);\n                        }\n                        else {\n                            squares[this.state.lastTurnPawnPosition].style = { ...squares[this.state.lastTurnPawnPosition].style, borderColor: \"transparent\" };\n                            blackFallenSoldiers.push(squares[this.state.lastTurnPawnPosition]);\n                        }\n                        squares[i] = squares[this.state.sourceSelection];\n                        squares[this.state.lastTurnPawnPosition] = null;\n                        squares[this.state.sourceSelection] = null;\n                        let player = this.state.player === 1 ? 2 : 1;\n                        let turn = this.state.turn === 'white' ? 'black' : 'white';\n                        this.setState({\n                            sourceSelection: -1,\n                            squares: squares,\n                            whiteFallenSoldiers: whiteFallenSoldiers,\n                            blackFallenSoldiers: blackFallenSoldiers,\n                            player: player,\n                            status: '',\n                            turn: turn,\n                            highLightMoves: []\n                        });\n                    } else {\n                        if (squares[i] !== null) {\n                            if (squares[i].player === 1) {\n                                squares[i].style = { ...squares[i].style, borderColor: \"transparent\" };\n                                whiteFallenSoldiers.push(squares[i]);\n                            }\n                            else {\n                                squares[i].style = { ...squares[i].style, borderColor: \"transparent\" };\n                                blackFallenSoldiers.push(squares[i]);\n                            }\n                        }\n\n                        //check if current pawn is moving for the first time and moving 2 squares forward\n                        let firstMove;\n                        if (squares[this.state.sourceSelection].name === \"Pawn\") {\n                            if (squares[this.state.sourceSelection].player === 1 && i === this.state.sourceSelection - 16) {\n                                firstMove = true;\n                            } else if (squares[this.state.sourceSelection].player === 2 && i === this.state.sourceSelection + 16) {\n                                firstMove = true;\n                            }\n                        }\n\n                        //record current pawn position for next turn to check en passant rule\n                        let lastTurnPawnPosition = i;\n\n                        squares[i] = squares[this.state.sourceSelection];\n                        squares[this.state.sourceSelection] = null;\n                        let player = this.state.player === 1 ? 2 : 1;\n                        let turn = this.state.turn === 'white' ? 'black' : 'white';\n                        this.setState({\n                            sourceSelection: -1,\n                            squares: squares,\n                            whiteFallenSoldiers: whiteFallenSoldiers,\n                            blackFallenSoldiers: blackFallenSoldiers,\n                            player: player,\n                            status: '',\n                            turn: turn,\n                            firstMove: firstMove,\n                            lastTurnPawnPosition: lastTurnPawnPosition,\n                            highLightMoves: []\n                        });\n                    }\n                } else {\n                    this.setState({\n                        status: \"Wrong selection. Choose valid source and destination again.\",\n                        sourceSelection: -1,\n                        squares: squares,\n                        highLightMoves: []\n                    });\n                }\n            } else if (squares[this.state.sourceSelection].name === \"King\") {\n                squares = this.dehighlight(squares);\n                if (this.state.highLightMoves.includes(i)) {\n                    if (squares[i] !== null) {\n                        if (squares[i].player === 1) {\n                            squares[i].style = { ...squares[i].style, borderColor: \"transparent\" };\n                            whiteFallenSoldiers.push(squares[i]);\n                        }\n                        else {\n                            squares[i].style = { ...squares[i].style, borderColor: \"transparent\" };\n                            blackFallenSoldiers.push(squares[i]);\n                        }\n                    }\n                    squares[i] = squares[this.state.sourceSelection];\n                    squares[this.state.sourceSelection] = null;\n                    let player = this.state.player === 1 ? 2 : 1;\n                    let turn = this.state.turn === 'white' ? 'black' : 'white';\n                    this.setState({\n                        sourceSelection: -1,\n                        squares: squares,\n                        whiteFallenSoldiers: whiteFallenSoldiers,\n                        blackFallenSoldiers: blackFallenSoldiers,\n                        player: player,\n                        status: '',\n                        turn: turn,\n                        highLightMoves: []\n                    });\n                } else {\n                    this.setState({\n                        status: \"Wrong selection. Choose valid source and destination again.\",\n                        sourceSelection: -1,\n                        highLightMoves: [],\n                        squares: squares\n                    });\n                }\n            } else {\n                squares = this.dehighlight(squares);\n                if (this.state.highLightMoves.includes(i)) {\n                    if (squares[i] !== null) {\n                        if (squares[i].player === 1) {\n                            squares[i].style = { ...squares[i].style, borderColor: \"transparent\" };\n                            whiteFallenSoldiers.push(squares[i]);\n                        }\n                        else {\n                            squares[i].style = { ...squares[i].style, borderColor: \"transparent\" };\n                            blackFallenSoldiers.push(squares[i]);\n                        }\n                    }\n                    squares[i] = squares[this.state.sourceSelection];\n                    squares[this.state.sourceSelection] = null;\n                    let player = this.state.player === 1 ? 2 : 1;\n                    let turn = this.state.turn === 'white' ? 'black' : 'white';\n\n                    //to record if rook has been moved or not. for castling.\n                    let whiteRookFirstMoveLeft = this.state.whiteRookFirstMoveLeft;\n                    let whiteRookFirstMoveRight = this.state.whiteRookFirstMoveRight;\n                    let blackRookFirstMoveLeft = this.state.blackRookFirstMoveLeft;\n                    let blackRookFirstMoveRight = this.state.blackRookFirstMoveRight;\n                    if (squares[i].name === \"Rook\" && this.state.sourceSelection === 56 && squares[i].player === 1) {\n                        whiteRookFirstMoveLeft = false;\n                    }\n                    console.log(i)\n                    console.log(squares[i].name)\n                    console.log(squares[i].player)\n                    if (squares[i].name === \"Rook\" && this.state.sourceSelection === 63 && squares[i].player === 1) {\n                        console.log(\"here\");\n                        whiteRookFirstMoveRight = false;\n                    }\n                    if (squares[i].name === \"Rook\" && this.state.sourceSelection === 0 && squares[i].player === 2) {\n                        blackRookFirstMoveLeft = false;\n                    }\n                    if (squares[i].name === \"Rook\" && this.state.sourceSelection === 7 && squares[i].player === 2) {\n                        blackRookFirstMoveRight = false;\n                    }\n\n                    this.setState({\n                        sourceSelection: -1,\n                        squares: squares,\n                        whiteFallenSoldiers: whiteFallenSoldiers,\n                        blackFallenSoldiers: blackFallenSoldiers,\n                        player: player,\n                        status: '',\n                        turn: turn,\n                        highLightMoves: [],\n                        whiteRookFirstMoveLeft: whiteRookFirstMoveLeft,\n                        whiteRookFirstMoveRight: whiteRookFirstMoveRight,\n                        blackRookFirstMoveLeft: blackRookFirstMoveLeft,\n                        blackRookFirstMoveRight: blackRookFirstMoveRight\n                    });\n                } else {\n                    this.setState({\n                        status: \"Wrong selection. Choose valid source and destination again.\",\n                        sourceSelection: -1,\n                        highLightMoves: [],\n                        squares: squares\n                    });\n                }\n            }\n        }\n    }\n\n    //to determine if its possible to do en passant capture\n    enpassant(selectedPawnPosition) {\n        let enpassant = false;\n        if (selectedPawnPosition - 1 === this.state.lastTurnPawnPosition || selectedPawnPosition + 1 === this.state.lastTurnPawnPosition) {\n            if (this.state.firstMove) {\n                enpassant = true;\n            }\n        }\n        return enpassant;\n    }\n\n    //dehighlight possible moves\n    dehighlight(squares) {\n        for (let index = 0; index < this.state.highLightMoves.length; index++) {\n            const element = this.state.highLightMoves[index];\n            if (squares[element].name === \"Pawn\" || squares[element].name === \"Knight\" || squares[element].name === \"Rook\" || squares[element].name === \"Bishop\" || squares[element].name === \"Queen\" || squares[element].name === \"King\") {\n                squares[element].style = { ...squares[element].style, backgroundColor: \"\" };\n            } else {\n                squares[element] = null;\n            }\n        }\n        return squares;\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"game\">\n                    <div className=\"game-board\">\n                        <Board\n                            squares={this.state.squares}\n                            onClick={(i) => this.handleClick(i)}\n                        />\n                    </div>\n                    <div className=\"game-info\">\n                        <h3>Turn</h3>\n                        <div id=\"player-turn-box\" style={{ backgroundColor: this.state.turn }}>\n\n                        </div>\n                        <div className=\"game-status\">{this.state.status}</div>\n\n                        <div className=\"fallen-soldier-block\">\n\n                            {<FallenSoldierBlock\n                                whiteFallenSoldiers={this.state.whiteFallenSoldiers}\n                                blackFallenSoldiers={this.state.blackFallenSoldiers}\n                            />\n                            }\n                        </div>\n\n                    </div>\n                </div>\n\n                <div className=\"icons-attribution\">\n                    <div> <small> Chess Icons And Favicon (extracted) By en:User:Cburnett [<a href=\"http://www.gnu.org/copyleft/fdl.html\">GFDL</a>, <a href=\"http://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA-3.0</a>, <a href=\"http://opensource.org/licenses/bsd-license.php\">BSD</a> or <a href=\"http://www.gnu.org/licenses/gpl.html\">GPL</a>], <a href=\"https://commons.wikimedia.org/wiki/Category:SVG_chess_pieces\">via Wikimedia Commons</a> </small></div>\n                </div>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}